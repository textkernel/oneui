"use strict";(self.webpackChunk_textkernel_oneui=self.webpackChunk_textkernel_oneui||[]).push([[1227],{"./stories/organisms/LocationAutocomplete.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{_LocationAutocomplete:function(){return _LocationAutocomplete},__namedExportsOrder:function(){return __namedExportsOrder},default:function(){return LocationAutocomplete_stories}});var react=__webpack_require__("./node_modules/react/index.js"),esm=__webpack_require__("./node_modules/@react-google-maps/api/dist/esm.js"),LoadingSpinner=__webpack_require__("./src/components/LoadingSpinner/LoadingSpinner.tsx"),LocationAutocomplete=__webpack_require__("./src/components/LocationAutocomplete/LocationAutocomplete.tsx"),__assign=function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)},__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t},GOOGLE_API_LIBRARIES=["places"],LocationAutocompleteWithGoogleLoader=function LocationAutocompleteWithGoogleLoader(_a){var apiKey=_a.apiKey,_b=_a.language,language=void 0===_b?void 0:_b,_c=_a.region,region=void 0===_c?void 0:_c,_d=_a.additionalGoogleProps,additionalGoogleProps=void 0===_d?{}:_d,rest=__rest(_a,["apiKey","language","region","additionalGoogleProps"]);return react.createElement(esm.BH,__assign({googleMapsApiKey:apiKey,language:language,region:region,loadingElement:react.createElement(LoadingSpinner.k,{centerIn:"parent"}),libraries:GOOGLE_API_LIBRARIES},additionalGoogleProps),react.createElement(LocationAutocomplete.q,__assign({},rest)))};LocationAutocompleteWithGoogleLoader.displayName="LocationAutocompleteWithGoogleLoader";try{LocationAutocompleteWithGoogleLoader.displayName="LocationAutocompleteWithGoogleLoader",LocationAutocompleteWithGoogleLoader.__docgenInfo={description:"",displayName:"LocationAutocompleteWithGoogleLoader",props:{apiKey:{defaultValue:null,description:"Google API key",name:"apiKey",required:!0,type:{name:"string"}},language:{defaultValue:{value:"undefined"},description:"The language code to be used for the map (e.g en). By default the users browser language will be used\nFor available values see: https://developers.google.com/maps/faq#languagesupport",name:"language",required:!1,type:{name:"string"}},region:{defaultValue:{value:"undefined"},description:"Regional setting for the map. By default Google uses US.\nFor details see: https://developers.google.com/maps/documentation/javascript/localization#Region",name:"region",required:!1,type:{name:"string"}},additionalGoogleProps:{defaultValue:{value:"{}"},description:"other props to pass to the google loader. For details see: https://react-google-maps-api-docs.netlify.com/#loadscriptnext",name:"additionalGoogleProps",required:!1,type:{name:'Omit<LoadScriptNextProps, "googleMapsApiKey">'}},inputRef:{defaultValue:null,description:"input field ref",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement>"}},inputPlaceholder:{defaultValue:null,description:"to be shown in the input field when no value is typed",name:"inputPlaceholder",required:!0,type:{name:"string"}},defaultInputValue:{defaultValue:null,description:"default input value",name:"defaultInputValue",required:!1,type:{name:"string"}},noSuggestionsPlaceholder:{defaultValue:null,description:"to be shown when no suggestions are available",name:"noSuggestionsPlaceholder",required:!0,type:{name:"string"}},isFocused:{defaultValue:null,description:"trigger of the initial focus of the input field",name:"isFocused",required:!1,type:{name:"boolean"}},clearTooltipLabel:{defaultValue:null,description:"label for the Clear button",name:"clearTooltipLabel",required:!1,type:{name:"string"}},singleLocation:{defaultValue:null,description:"defines if there's a single location to select in component",name:"singleLocation",required:!1,type:{name:"boolean"}},onSelectionChange:{defaultValue:null,description:"callback to be called with selected value.",name:"onSelectionChange",required:!0,type:{name:"(value: AutocompletePrediction) => void"}},country:{defaultValue:null,description:"restrict predictions to country/countries.\nFor details see: https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#ComponentRestrictions",name:"country",required:!1,type:{name:"string | string[]"}},placeTypes:{defaultValue:null,description:"type of locations that should be searched for.\nFor details see: https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#AutocompletionRequest.types",name:"placeTypes",required:!1,type:{name:"string[]"}},showCountryInSuggestions:{defaultValue:null,description:"show state and country in suggestions list",name:"showCountryInSuggestions",required:!1,type:{name:"boolean"}},onRemoveAllLocations:{defaultValue:null,description:"function to remove all locations",name:"onRemoveAllLocations",required:!1,type:{name:"(() => void)"}},onError:{defaultValue:null,description:"function to be executed if error occurs while fetching suggestions",name:"onError",required:!1,type:{name:"((error: PlacesServiceStatus) => void)"}},hidePoweredByGoogleLogo:{defaultValue:null,description:"To hide powered by google logo. For legal reasons only set it to true if Google map is displayed on the same screen as this component!",name:"hidePoweredByGoogleLogo",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"a class to be applied to the top level div",name:"className",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"HTML id for the input element",name:"id",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"onFocus() is called when the component is focused",name:"onFocus",required:!1,type:{name:"(() => void)"}},onBlur:{defaultValue:null,description:"onBlur() is called when the component is blurred",name:"onBlur",required:!1,type:{name:"(() => void)"}},onSubmit:{defaultValue:null,description:"Function to be called on submitting form",name:"onSubmit",required:!1,type:{name:"(() => void)"}},disabled:{defaultValue:null,description:"defines if the component is disabled",name:"disabled",required:!1,type:{name:"boolean"}},showClearButton:{defaultValue:null,description:"show Clear button on hover even if there are no selectedSuggestions passed",name:"showClearButton",required:!1,type:{name:"boolean"}},isLoading:{defaultValue:null,description:"If suggestions are still loading, i.e. display placeholders",name:"isLoading",required:!1,type:{name:"boolean"}},clearInputAfterSelection:{defaultValue:null,description:"",name:"clearInputAfterSelection",required:!1,type:{name:"boolean"}},onInputValueChange:{defaultValue:null,description:"onInputValueChange(inputValue) called when the input values is changed. Can be used to implement the component as controlled component",name:"onInputValueChange",required:!1,type:{name:"((value: string) => void)"}},initInputValue:{defaultValue:null,description:"Initial input value should be shown if input gets focused",name:"initInputValue",required:!1,type:{name:"string"}},suggestionToKey:{defaultValue:null,description:"Creates a unique (React) key for a suggestion item. If undefined suggestionToString will be used",name:"suggestionToKey",required:!1,type:{name:"((suggestions: AutocompletePrediction) => string)"}},selectedSuggestions:{defaultValue:null,description:"An array of already selected suggestions",name:"selectedSuggestions",required:!1,type:{name:"AutocompletePrediction[]"}},numberOfVisibleTags:{defaultValue:null,description:"Number of visible tags in blur mode",name:"numberOfVisibleTags",required:!1,type:{name:"number"}},allowMixingSuggestionsAndLoading:{defaultValue:null,description:"Defines if suggestions list is visible even while loading other elements",name:"allowMixingSuggestionsAndLoading",required:!1,type:{name:"boolean"}},useOptimizeListRender:{defaultValue:null,description:"Enable ListOptimizer component for decreasing render time",name:"useOptimizeListRender",required:!1,type:{name:"boolean"}},onSelectionRemove:{defaultValue:null,description:"Function to be called when a suggestion is removed",name:"onSelectionRemove",required:!1,type:{name:"((item: AutocompletePrediction) => void)"}},customSelectionIndicator:{defaultValue:null,description:"Means to overwrite the look and feel of the UI in its blurred state.\nIt should be null or undefined if there is no selection yet",name:"customSelectionIndicator",required:!1,type:{name:"ReactNode"}},inputAttrs:{defaultValue:null,description:"Additional HTML attributes to be applied to the input element",name:"inputAttrs",required:!1,type:{name:"DictionaryOf<string | boolean>"}},iconNode:{defaultValue:null,description:"icon which should render",name:"iconNode",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},customListRender:{defaultValue:null,description:"render custom list values",name:"customListRender",required:!1,type:{name:"((suggestions: any) => ReactNode)"}},shouldRenderWithPortal:{defaultValue:null,description:"determines if the suggestion list should be rendered using a React Portal\nto the dropdown needs to bypass parent element clipping, overflow, or z-index issues.",name:"shouldRenderWithPortal",required:!1,type:{name:"boolean"}},suggestionItemRenderer:{defaultValue:null,description:"render function for suggestion list item. If undefined, suggestionToString will be used.",name:"suggestionItemRenderer",required:!1,type:{name:"((suggestions: AutocompletePrediction | null, index: number, array: AutocompletePrediction[]) => ReactNode)"}},rootRef:{defaultValue:null,description:"root wrapper ref",name:"rootRef",required:!1,type:{name:"RefObject<HTMLDivElement>"}},listRef:{defaultValue:null,description:"suggestions list ref",name:"listRef",required:!1,type:{name:"RefObject<HTMLUListElement>"}},onOuterClick:{defaultValue:null,description:"a callback to be called when outer click happens",name:"onOuterClick",required:!1,type:{name:"(() => void)"}},clearTitle:{defaultValue:null,description:"to be shown as clear button title",name:"clearTitle",required:!1,type:{name:"ReactNode"}},onClearAllSelected:{defaultValue:null,description:"function to be called if FieldWrapper clear button is clicked",name:"onClearAllSelected",required:!1,type:{name:"(() => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/LocationAutocomplete/LocationAutocompleteWithGoogleLoader.tsx#LocationAutocompleteWithGoogleLoader"]={docgenInfo:LocationAutocompleteWithGoogleLoader.__docgenInfo,name:"LocationAutocompleteWithGoogleLoader",path:"src/components/LocationAutocomplete/LocationAutocompleteWithGoogleLoader.tsx#LocationAutocompleteWithGoogleLoader"})}catch(__react_docgen_typescript_loader_error){}var ensureApiKey=__webpack_require__("./stories/utils/ensureApiKey.ts"),LocationAutocomplete_stories_assign=function(){return LocationAutocomplete_stories_assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},LocationAutocomplete_stories_assign.apply(this,arguments)},LocationAutocomplete_stories={title:"Organisms/LocationAutocomplete",component:LocationAutocompleteWithGoogleLoader,subcomponents:{LocationAutocomplete:LocationAutocomplete.q}},_LocationAutocomplete={name:"LocationAutocomplete",args:{apiKey:(0,ensureApiKey.y)("places")||"",inputPlaceholder:"Enter a city or region...",noSuggestionsPlaceholder:"No suggestions found",clearTooltipLabel:"Clear",country:"UK",onError:function onError(error){"REQUEST_DENIED"===error?window.alert("For this component to work, please reload the page and provide a valid API key"):console.log("Google places API responded with: ".concat(error))}},render:function render(args){return react.createElement(LocationAutocompleteWithGoogleLoader,LocationAutocomplete_stories_assign({},args))}};_LocationAutocomplete.parameters={..._LocationAutocomplete.parameters,docs:{..._LocationAutocomplete.parameters?.docs,source:{originalSource:"{\n  name: 'LocationAutocomplete',\n  args: {\n    apiKey,\n    inputPlaceholder: 'Enter a city or region...',\n    noSuggestionsPlaceholder: 'No suggestions found',\n    clearTooltipLabel: 'Clear',\n    country: 'UK',\n    onError\n  },\n  render: args => <LocationAutocompleteWithGoogleLoader {...args} />\n}",..._LocationAutocomplete.parameters?.docs?.source}}};const __namedExportsOrder=["_LocationAutocomplete"]},"./stories/utils/ensureApiKey.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){function ensureApiKey(library){void 0===library&&(library=null);var apiKey=window.localStorage.getItem("storybook_google_api_key");if((!apiKey&&window.google||apiKey&&window.google&&(!window.google.maps||library&&!window.google.maps[library]))&&window.alert("Looks like google API wasn't correctly loaded on the page. Please might need to refresh the page before continuing"),!apiKey){if(!(apiKey=window.prompt("Please provide a Google API key")))return null;window.localStorage.setItem("storybook_google_api_key",apiKey)}return apiKey}__webpack_require__.d(__webpack_exports__,{y:function(){return ensureApiKey}})},"./node_modules/tslib/tslib.es6.mjs":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{Cl:function(){return __assign},Tt:function(){return __rest},fX:function(){return __spreadArray}});var __assign=function(){return __assign=Object.assign||function __assign(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)};function __rest(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t}Object.create;function __spreadArray(to,from,pack){if(pack||2===arguments.length)for(var ar,i=0,l=from.length;i<l;i++)!ar&&i in from||(ar||(ar=Array.prototype.slice.call(from,0,i)),ar[i]=from[i]);return to.concat(ar||Array.prototype.slice.call(from))}Object.create;"function"==typeof SuppressedError&&SuppressedError}}]);