"use strict";(self.webpackChunk_textkernel_oneui=self.webpackChunk_textkernel_oneui||[]).push([[322],{"./stories/organisms/LocationSelector.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Basic:function(){return Basic},MultiSelect:function(){return MultiSelect},SingleSelect:function(){return SingleSelect},__namedExportsOrder:function(){return __namedExportsOrder},default:function(){return LocationSelector_stories}});var react=__webpack_require__("./node_modules/react/index.js"),index_esm=__webpack_require__("./node_modules/react-icons/fa/index.esm.js"),bem=__webpack_require__("./src/utils/bem/bem.js"),Modal=__webpack_require__("./src/components/Modal/Modal.tsx"),FieldWrapper=__webpack_require__("./src/components/FieldWrapper/FieldWrapper.tsx"),esm=__webpack_require__("./node_modules/@react-google-maps/api/dist/esm.js"),LoadingSpinner=__webpack_require__("./src/components/LoadingSpinner/LoadingSpinner.tsx"),LocationCard=__webpack_require__("./src/components/LocationCard/LocationCard.tsx"),Text=__webpack_require__("./src/components/Text/Text.tsx"),Slider=__webpack_require__("./src/components/Sliders/Slider/Slider.tsx"),Button=__webpack_require__("./src/components/Buttons/Button/Button.tsx"),LocationAutocomplete=__webpack_require__("./src/components/LocationAutocomplete/LocationAutocomplete.tsx"),Map=__webpack_require__("./src/components/Map/Map/Map.tsx"),keyboard=__webpack_require__("./src/constants/keyboard.ts"),style_related=__webpack_require__("./src/constants/style-related.ts"),__assign=function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)},elem=(0,bem.T)("LocationSelectorDialog",{LocationSelectorDialog__inputLine:"LocationSelectorDialog__inputLine--aWwdAzlZbk",LocationSelectorDialog__searchField:"LocationSelectorDialog__searchField--kSxGcKDxvJ",LocationSelectorDialog__slider:"LocationSelectorDialog__slider--ywvmlma0r6",LocationSelectorDialog__sliderLabel:"LocationSelectorDialog__sliderLabel--NpLmDylcK_",LocationSelectorDialog__button:"LocationSelectorDialog__button--XDD9rGIRln",LocationSelectorDialog__locationsWrapper:"LocationSelectorDialog__locationsWrapper--MNEUaYYL_U",LocationSelectorDialog__locationCardsContainer:"LocationSelectorDialog__locationCardsContainer--d_hqBVzYJk",LocationSelectorDialog__locationCard:"LocationSelectorDialog__locationCard--XlN2B0YC3N"}).elem,LocationSelectorDialog_LocationSelectorDialog=function LocationSelectorDialog(_a){var inputPlaceholder=_a.inputPlaceholder,hasRadius=_a.hasRadius,minRadius=_a.minRadius,maxRadius=_a.maxRadius,radiusStep=_a.radiusStep,renderRadiusLabel=_a.renderRadiusLabel,onRemoveLocation=_a.onRemoveLocation,doneLabel=_a.doneLabel,clearTooltipLabel=_a.clearTooltipLabel,country=_a.country,_b=_a.initialMapAddress,initialMapAddress=void 0===_b?null:_b,_c=_a.defaultHighlight,defaultHighlight=void 0===_c?void 0:_c,placeTypes=_a.placeTypes,noSuggestionsPlaceholder=_a.noSuggestionsPlaceholder,showCountryInSuggestions=_a.showCountryInSuggestions,_d=_a.onLocationAutocompleteError,onLocationAutocompleteError=void 0===_d?null:_d,_e=_a.withoutLocationCards,withoutLocationCards=void 0!==_e&&_e,onUpdateLocation=_a.onUpdateLocation,selectedLocations=_a.selectedLocations,_f=_a.getMarkers,getMarkers=void 0===_f?function(){}:_f,onAddLocation=_a.onAddLocation,onRemoveAllLocations=_a.onRemoveAllLocations,_g=_a.onCloseModal,onCloseModal=void 0===_g?function(){return null}:_g,locationInputRef=react.createRef(),firstSelectedLocation=selectedLocations[0];var handleRemoveLocation=function handleRemoveLocation(locationId){locationInputRef.current&&locationInputRef.current.focus(),onRemoveLocation(locationId)};return react.createElement(react.Fragment,null,react.createElement("div",__assign({},elem("inputLine"),{role:"presentation",onKeyDown:function handleInputFormSubmit(e){e.key===keyboard.jD&&(e.stopPropagation(),null==onCloseModal||onCloseModal())}}),react.createElement(LocationAutocomplete.q,__assign({},elem("searchField"),{isFocused:!0,inputRef:locationInputRef,defaultInputValue:withoutLocationCards&&firstSelectedLocation?firstSelectedLocation.description:"",inputPlaceholder:inputPlaceholder,clearTooltipLabel:clearTooltipLabel,noSuggestionsPlaceholder:noSuggestionsPlaceholder,onSelectionChange:function handleAddLocation(location){locationInputRef.current&&!withoutLocationCards&&setTimeout((function(){var _a;return null===(_a=locationInputRef.current)||void 0===_a?void 0:_a.focus()})),onAddLocation(location)},country:country,placeTypes:placeTypes,singleLocation:withoutLocationCards,showCountryInSuggestions:showCountryInSuggestions,onRemoveAllLocations:onRemoveAllLocations,onError:onLocationAutocompleteError,hidePoweredByGoogleLogo:!0})),hasRadius&&withoutLocationCards&&1===selectedLocations.length&&react.createElement("div",__assign({},elem("slider")),react.createElement(Slider.A,{value:firstSelectedLocation.radius,min:minRadius,max:maxRadius,step:radiusStep,railStyle:{backgroundColor:"var(--color-neutral-30)"},onChange:function handleRadiusChange(radius){onUpdateLocation(firstSelectedLocation.id,radius)}}),react.createElement(Text.E,__assign({size:style_related.ng[0]},elem("sliderLabel")),renderRadiusLabel(firstSelectedLocation.radius))),react.createElement(Button.$,__assign({},elem("button"),{onClick:onCloseModal,context:"primary"}),doneLabel)),react.createElement("div",__assign({},elem("locationsWrapper")),!withoutLocationCards&&selectedLocations.length>0&&react.createElement("ul",__assign({},elem("locationCardsContainer")),selectedLocations.map((function(location){return react.createElement(LocationCard.u,__assign({},elem("locationCard"),{As:"li",key:location.id,locationId:location.id,locationTitle:location.description,distanceRadius:location.radius,sliderLabel:renderRadiusLabel(location.radius),hasRadius:hasRadius,minRadius:minRadius,maxRadius:maxRadius,radiusStep:radiusStep,onRadiusChange:onUpdateLocation,onDelete:handleRemoveLocation}))}))),react.createElement(Map.T,{defaultArea:function getDefaultArea(){if(initialMapAddress||country)return{address:initialMapAddress||country}}(),markers:null==getMarkers?void 0:getMarkers(),defaultHighlight:defaultHighlight})))};LocationSelectorDialog_LocationSelectorDialog.displayName="LocationSelectorDialog";try{LocationSelectorDialog_LocationSelectorDialog.displayName="LocationSelectorDialog",LocationSelectorDialog_LocationSelectorDialog.__docgenInfo={description:"",displayName:"LocationSelectorDialog",props:{withoutLocationCards:{defaultValue:{value:"false"},description:"defines if location cards should be rendered or not",name:"withoutLocationCards",required:!1,type:{name:"boolean"}},selectedLocations:{defaultValue:null,description:"stores an array of selected location objects",name:"selectedLocations",required:!0,type:{name:"LocationSelectorLocation[]"}},renderRadiusLabel:{defaultValue:null,description:"radius label renderer e.g. radius => `+ ${radius} km`",name:"renderRadiusLabel",required:!0,type:{name:"(radius: number) => string"}},initialMapAddress:{defaultValue:{value:"null"},description:"address to make initial map centering more specific",name:"initialMapAddress",required:!1,type:{name:"string"}},onLocationAutocompleteError:{defaultValue:{value:"null"},description:"function to be executed if error occurs while fetching suggestions",name:"onLocationAutocompleteError",required:!1,type:{name:"((status: PlacesServiceStatus) => void)"}},doneLabel:{defaultValue:null,description:"label for the Done button",name:"doneLabel",required:!0,type:{name:"string"}},onAddLocation:{defaultValue:null,description:"function called with location object as an argument when it is selected from the suggestions",name:"onAddLocation",required:!0,type:{name:"(location: LocationSelectorLocation) => void"}},onUpdateLocation:{defaultValue:null,description:"function called with a location details as an argument to be changed",name:"onUpdateLocation",required:!0,type:{name:"(locationId: string | undefined, radius: number) => void"}},onRemoveLocation:{defaultValue:null,description:"function with a locationId as an argument to be removed",name:"onRemoveLocation",required:!0,type:{name:"(locationId: string | undefined) => void"}},getMarkers:{defaultValue:{value:"() => undefined"},description:"function to calculate marker positions in Map",name:"getMarkers",required:!1,type:{name:"(() => CircularMarker[])"}},onCloseModal:{defaultValue:{value:"() => null"},description:"function to be called when teh Done button is clicked",name:"onCloseModal",required:!1,type:{name:"(() => void)"}},defaultHighlight:{defaultValue:{value:"undefined"},description:"A geoJson description of the area that should be highlighted when there are no other markers present",name:"defaultHighlight",required:!1,type:{name:"GeoJsonObject"}},locationId:{defaultValue:null,description:"Location id",name:"locationId",required:!1,type:{name:"string"}},hasRadius:{defaultValue:null,description:"Defines if location card has a radius slider",name:"hasRadius",required:!1,type:{name:"boolean"}},sliderLabel:{defaultValue:null,description:"Slider indication string for displaying its formatted value",name:"sliderLabel",required:!1,type:{name:"string"}},minRadius:{defaultValue:null,description:"The minimum value of the distance slider",name:"minRadius",required:!1,type:{name:"number"}},maxRadius:{defaultValue:null,description:"The maximum value of the distance slider",name:"maxRadius",required:!1,type:{name:"number"}},radiusStep:{defaultValue:null,description:"Value to be added or subtracted on each step the distance slider makes.\nMust be greater than zero, and max - min should be evenly divisible by the step value.",name:"radiusStep",required:!1,type:{name:"number"}},onRadiusChange:{defaultValue:null,description:"Slider value change callback",name:"onRadiusChange",required:!1,type:{name:"((locationId: string, radius: number) => void)"}},country:{defaultValue:null,description:"restrict predictions to country/countries.\nFor details see: https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#ComponentRestrictions",name:"country",required:!1,type:{name:"string | string[]"}},clearTooltipLabel:{defaultValue:null,description:"label for the Clear button",name:"clearTooltipLabel",required:!1,type:{name:"string"}},isFocused:{defaultValue:null,description:"trigger of the initial focus of the input field",name:"isFocused",required:!1,type:{name:"boolean"}},inputPlaceholder:{defaultValue:null,description:"to be shown in the input field when no value is typed",name:"inputPlaceholder",required:!0,type:{name:"string"}},noSuggestionsPlaceholder:{defaultValue:null,description:"to be shown when no suggestions are available",name:"noSuggestionsPlaceholder",required:!0,type:{name:"string"}},placeTypes:{defaultValue:null,description:"type of locations that should be searched for.\nFor details see: https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#AutocompletionRequest.types",name:"placeTypes",required:!1,type:{name:"string[]"}},showCountryInSuggestions:{defaultValue:null,description:"show state and country in suggestions list",name:"showCountryInSuggestions",required:!1,type:{name:"boolean"}},onRemoveAllLocations:{defaultValue:null,description:"function to remove all locations",name:"onRemoveAllLocations",required:!1,type:{name:"(() => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/LocationSelector/LocationSelectorDialog/LocationSelectorDialog.tsx#LocationSelectorDialog"]={docgenInfo:LocationSelectorDialog_LocationSelectorDialog.__docgenInfo,name:"LocationSelectorDialog",path:"src/components/LocationSelector/LocationSelectorDialog/LocationSelectorDialog.tsx#LocationSelectorDialog"})}catch(__react_docgen_typescript_loader_error){}var utils=__webpack_require__("./src/components/LocationSelector/utils.ts"),LocationSelectorDialogWithGoogleLoader_assign=function(){return LocationSelectorDialogWithGoogleLoader_assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},LocationSelectorDialogWithGoogleLoader_assign.apply(this,arguments)},__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t},LocationSelectorDialogWithGoogleLoader=function LocationSelectorDialogWithGoogleLoader(_a){var apiKey=_a.apiKey,language=_a.language,_b=_a.region,region=void 0===_b?void 0:_b,_c=_a.additionalGoogleProps,additionalGoogleProps=void 0===_c?{}:_c,hasRadius=_a.hasRadius,minRadius=_a.minRadius,maxRadius=_a.maxRadius,radiusStep=_a.radiusStep,renderRadiusLabel=_a.renderRadiusLabel,onRemoveLocation=_a.onRemoveLocation,doneLabel=_a.doneLabel,clearTooltipLabel=_a.clearTooltipLabel,country=_a.country,initialMapAddress=_a.initialMapAddress,placeTypes=_a.placeTypes,noSuggestionsPlaceholder=_a.noSuggestionsPlaceholder,showCountryInSuggestions=_a.showCountryInSuggestions,onLocationAutocompleteError=_a.onLocationAutocompleteError,defaultHighlight=_a.defaultHighlight,withoutLocationCards=_a.withoutLocationCards,onCloseModal=_a.onCloseModal,onAddLocation=_a.onAddLocation,onUpdateLocation=_a.onUpdateLocation,onRemoveAllLocations=_a.onRemoveAllLocations,selectedLocations=_a.selectedLocations,inputPlaceholder=_a.inputPlaceholder,getMarkers=_a.getMarkers,additionalGoogleRestProps=(additionalGoogleProps.googleMapsApiKey,__rest(additionalGoogleProps,["googleMapsApiKey"]));return react.createElement(esm.BH,LocationSelectorDialogWithGoogleLoader_assign({googleMapsApiKey:apiKey,language:language,region:region,loadingElement:react.createElement(LoadingSpinner.k,{centerIn:"parent"}),libraries:utils.bF},additionalGoogleRestProps),react.createElement(LocationSelectorDialog_LocationSelectorDialog,{inputPlaceholder:inputPlaceholder,hasRadius:hasRadius,minRadius:minRadius,maxRadius:maxRadius,radiusStep:radiusStep,renderRadiusLabel:renderRadiusLabel,onRemoveLocation:onRemoveLocation,doneLabel:doneLabel,clearTooltipLabel:clearTooltipLabel,country:country,withoutLocationCards:withoutLocationCards,initialMapAddress:initialMapAddress,defaultHighlight:defaultHighlight,placeTypes:placeTypes,noSuggestionsPlaceholder:noSuggestionsPlaceholder,showCountryInSuggestions:showCountryInSuggestions,onLocationAutocompleteError:onLocationAutocompleteError,onUpdateLocation:onUpdateLocation,selectedLocations:selectedLocations,getMarkers:getMarkers,onAddLocation:onAddLocation,onRemoveAllLocations:onRemoveAllLocations,onCloseModal:onCloseModal}))};LocationSelectorDialogWithGoogleLoader.displayName="LocationSelectorDialogWithGoogleLoader";try{LocationSelectorDialogWithGoogleLoader.displayName="LocationSelectorDialogWithGoogleLoader",LocationSelectorDialogWithGoogleLoader.__docgenInfo={description:"",displayName:"LocationSelectorDialogWithGoogleLoader",props:{apiKey:{defaultValue:null,description:"Google api key",name:"apiKey",required:!0,type:{name:"string"}},language:{defaultValue:null,description:"language in which suggestions should be displayed",name:"language",required:!0,type:{name:"string"}},region:{defaultValue:{value:"undefined"},description:"Regional setting for the map. By default Google uses US.\nFor details see: https://developers.google.com/maps/documentation/javascript/localization#Region",name:"region",required:!1,type:{name:"string"}},additionalGoogleProps:{defaultValue:{value:"{}"},description:"other props to pass to the google loader. For details see: https://react-google-maps-api-docs.netlify.com/#loadscriptnext",name:"additionalGoogleProps",required:!1,type:{name:"LoadScriptNextProps"}},withoutLocationCards:{defaultValue:null,description:"defines if location cards should be rendered or not",name:"withoutLocationCards",required:!1,type:{name:"boolean"}},selectedLocations:{defaultValue:null,description:"stores an array of selected location objects",name:"selectedLocations",required:!0,type:{name:"LocationSelectorLocation[]"}},renderRadiusLabel:{defaultValue:null,description:"radius label renderer e.g. radius => `+ ${radius} km`",name:"renderRadiusLabel",required:!0,type:{name:"(radius: number) => string"}},initialMapAddress:{defaultValue:null,description:"address to make initial map centering more specific",name:"initialMapAddress",required:!1,type:{name:"string"}},onLocationAutocompleteError:{defaultValue:null,description:"function to be executed if error occurs while fetching suggestions",name:"onLocationAutocompleteError",required:!1,type:{name:"((status: PlacesServiceStatus) => void)"}},doneLabel:{defaultValue:null,description:"label for the Done button",name:"doneLabel",required:!0,type:{name:"string"}},onAddLocation:{defaultValue:null,description:"function called with location object as an argument when it is selected from the suggestions",name:"onAddLocation",required:!0,type:{name:"(location: LocationSelectorLocation) => void"}},onUpdateLocation:{defaultValue:null,description:"function called with a location details as an argument to be changed",name:"onUpdateLocation",required:!0,type:{name:"(locationId: string | undefined, radius: number) => void"}},onRemoveLocation:{defaultValue:null,description:"function with a locationId as an argument to be removed",name:"onRemoveLocation",required:!0,type:{name:"(locationId: string | undefined) => void"}},getMarkers:{defaultValue:null,description:"function to calculate marker positions in Map",name:"getMarkers",required:!1,type:{name:"(() => CircularMarker[])"}},onCloseModal:{defaultValue:null,description:"function to be called when teh Done button is clicked",name:"onCloseModal",required:!1,type:{name:"(() => void)"}},defaultHighlight:{defaultValue:null,description:"A geoJson description of the area that should be highlighted when there are no other markers present",name:"defaultHighlight",required:!1,type:{name:"GeoJsonObject"}},locationId:{defaultValue:null,description:"Location id",name:"locationId",required:!1,type:{name:"string"}},hasRadius:{defaultValue:null,description:"Defines if location card has a radius slider",name:"hasRadius",required:!1,type:{name:"boolean"}},sliderLabel:{defaultValue:null,description:"Slider indication string for displaying its formatted value",name:"sliderLabel",required:!1,type:{name:"string"}},minRadius:{defaultValue:null,description:"The minimum value of the distance slider",name:"minRadius",required:!1,type:{name:"number"}},maxRadius:{defaultValue:null,description:"The maximum value of the distance slider",name:"maxRadius",required:!1,type:{name:"number"}},radiusStep:{defaultValue:null,description:"Value to be added or subtracted on each step the distance slider makes.\nMust be greater than zero, and max - min should be evenly divisible by the step value.",name:"radiusStep",required:!1,type:{name:"number"}},onRadiusChange:{defaultValue:null,description:"Slider value change callback",name:"onRadiusChange",required:!1,type:{name:"((locationId: string, radius: number) => void)"}},country:{defaultValue:null,description:"restrict predictions to country/countries.\nFor details see: https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#ComponentRestrictions",name:"country",required:!1,type:{name:"string | string[]"}},clearTooltipLabel:{defaultValue:null,description:"label for the Clear button",name:"clearTooltipLabel",required:!1,type:{name:"string"}},isFocused:{defaultValue:null,description:"trigger of the initial focus of the input field",name:"isFocused",required:!1,type:{name:"boolean"}},inputPlaceholder:{defaultValue:null,description:"to be shown in the input field when no value is typed",name:"inputPlaceholder",required:!0,type:{name:"string"}},noSuggestionsPlaceholder:{defaultValue:null,description:"to be shown when no suggestions are available",name:"noSuggestionsPlaceholder",required:!0,type:{name:"string"}},placeTypes:{defaultValue:null,description:"type of locations that should be searched for.\nFor details see: https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#AutocompletionRequest.types",name:"placeTypes",required:!1,type:{name:"string[]"}},showCountryInSuggestions:{defaultValue:null,description:"show state and country in suggestions list",name:"showCountryInSuggestions",required:!1,type:{name:"boolean"}},onRemoveAllLocations:{defaultValue:null,description:"function to remove all locations",name:"onRemoveAllLocations",required:!1,type:{name:"(() => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/LocationSelector/LocationSelectorDialogWithGoogleLoader/LocationSelectorDialogWithGoogleLoader.tsx#LocationSelectorDialogWithGoogleLoader"]={docgenInfo:LocationSelectorDialogWithGoogleLoader.__docgenInfo,name:"LocationSelectorDialogWithGoogleLoader",path:"src/components/LocationSelector/LocationSelectorDialogWithGoogleLoader/LocationSelectorDialogWithGoogleLoader.tsx#LocationSelectorDialogWithGoogleLoader"})}catch(__react_docgen_typescript_loader_error){}var useBrowserTabVisibilityChange=__webpack_require__("./src/hooks/useBrowserTabVisibilityChange.ts"),LocationSelector_assign=function(){return LocationSelector_assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},LocationSelector_assign.apply(this,arguments)},LocationSelector_rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t},_a=(0,bem.T)("LocationSelector",{LocationSelector__mainTextButtonWrapper:"LocationSelector__mainTextButtonWrapper--AjZObi_aKI",LocationSelector__mainTextButton:"LocationSelector__mainTextButton--fNse8yXIGP","LocationSelector__mainTextButton--muted":"LocationSelector__mainTextButton--muted--iSpkNiD_ml",LocationSelector__icon:"LocationSelector__icon--VQSyfzt_VG",LocationSelector__modal:"LocationSelector__modal--E0akk0X12O"}),block=_a.block,LocationSelector_elem=_a.elem,LocationSelector_LocationSelector=function LocationSelector(_a){var apiKey=_a.apiKey,language=_a.language,_b=_a.region,region=void 0===_b?void 0:_b,_c=_a.additionalGoogleProps,additionalGoogleProps=void 0===_c?void 0:_c,id=_a.id,clearTooltipLabel=_a.clearTooltipLabel,onRemoveAllLocations=_a.onRemoveAllLocations,inputPlaceholder=_a.inputPlaceholder,selectionPlaceholder=_a.selectionPlaceholder,modalContentLabel=_a.modalContentLabel,hasRadius=_a.hasRadius,_d=_a.minRadius,minRadius=void 0===_d?1:_d,_e=_a.maxRadius,maxRadius=void 0===_e?100:_e,_f=_a.radiusStep,radiusStep=void 0===_f?1:_f,renderRadiusLabel=_a.renderRadiusLabel,doneLabel=_a.doneLabel,modalInputPlaceholder=_a.modalInputPlaceholder,_g=_a.country,country=void 0===_g?void 0:_g,_h=_a.initialMapAddress,initialMapAddress=void 0===_h?void 0:_h,_j=_a.placeTypes,placeTypes=void 0===_j?["(regions)"]:_j,noSuggestionsPlaceholder=_a.noSuggestionsPlaceholder,showCountryInSuggestions=_a.showCountryInSuggestions,_k=_a.onLocationAutocompleteError,onLocationAutocompleteError=void 0===_k?function(){return null}:_k,_l=_a.defaultHighlight,defaultHighlight=void 0===_l?void 0:_l,_m=_a.openOnEnterPress,openOnEnterPress=void 0===_m||_m,_o=_a.selectedLocations,selectedLocations=void 0===_o?[]:_o,_p=_a.radiusDefaultValue,radiusDefaultValue=void 0===_p?1:_p,radiusUnits=_a.radiusUnits,_q=_a.shouldGetAddressInfo,shouldGetAddressInfo=void 0!==_q&&_q,_r=_a.withoutLocationCards,withoutLocationCards=void 0!==_r&&_r,onAddLocation=_a.onAddLocation,onUpdateLocation=_a.onUpdateLocation,onRemoveLocation=_a.onRemoveLocation,_s=_a.onBlur,onBlur=void 0===_s?function(){return null}:_s,rest=LocationSelector_rest(_a,["apiKey","language","region","additionalGoogleProps","id","clearTooltipLabel","onRemoveAllLocations","inputPlaceholder","selectionPlaceholder","modalContentLabel","hasRadius","minRadius","maxRadius","radiusStep","renderRadiusLabel","doneLabel","modalInputPlaceholder","country","initialMapAddress","placeTypes","noSuggestionsPlaceholder","showCountryInSuggestions","onLocationAutocompleteError","defaultHighlight","openOnEnterPress","selectedLocations","radiusDefaultValue","radiusUnits","shouldGetAddressInfo","withoutLocationCards","onAddLocation","onUpdateLocation","onRemoveLocation","onBlur"]),_t=react.useState(!1),isOpen=_t[0],setIsOpen=_t[1],_u=react.useState(!1),isWrapperFocused=_u[0],setIsWrapperFocused=_u[1],isBrowserTabVisible=(0,useBrowserTabVisibilityChange.L)(),buttonRef=react.useRef(),hasLocationsSelected=selectedLocations&&selectedLocations.length>0,handleOpenModal=function handleOpenModal(){var _a;isOpen||isWrapperFocused||!isBrowserTabVisible||(null===(_a=buttonRef.current)||void 0===_a||_a.focus(),setIsOpen(!0)),setIsWrapperFocused(!0)},handleCloseModal=function handleCloseModal(){isOpen&&isBrowserTabVisible&&(setIsOpen(!1),null==onBlur||onBlur())};return react.createElement("div",LocationSelector_assign({},rest,block(LocationSelector_assign({},rest))),react.createElement(FieldWrapper.c,LocationSelector_assign({},LocationSelector_elem("mainTextButtonWrapper"),{title:selectionPlaceholder||inputPlaceholder,isFocused:isWrapperFocused,showClearButton:hasLocationsSelected,clearTooltipLabel:clearTooltipLabel,onClick:handleOpenModal,onClear:onRemoveAllLocations}),react.createElement(index_esm.vq8,LocationSelector_assign({},LocationSelector_elem("icon"))),react.createElement("button",LocationSelector_assign({id:id,ref:buttonRef,type:"button"},LocationSelector_elem("mainTextButton",{muted:!selectionPlaceholder}),{onFocus:handleOpenModal,onBlur:function handleButtonBlur(){isOpen||setIsWrapperFocused(!1)},onKeyUp:function handleButtonKeyPress(e){var _a;if(e.key===keyboard.aH)null===(_a=buttonRef.current)||void 0===_a||_a.blur();else if(e.key===keyboard.jD)if(openOnEnterPress&&0===selectedLocations.length)setIsOpen(!0);else{var target=e.target;if(target.form)target.form.querySelector('[type="submit"]').click()}}}),selectionPlaceholder||inputPlaceholder)),react.createElement(Modal.a,LocationSelector_assign({},LocationSelector_elem("modal"),{isOpen:isOpen,ariaHideApp:!1,onRequestClose:handleCloseModal,contentLabel:modalContentLabel,isPositionFixed:!0}),react.createElement(LocationSelectorDialogWithGoogleLoader,LocationSelector_assign({apiKey:apiKey,language:language,region:region},additionalGoogleProps,{inputPlaceholder:modalInputPlaceholder||inputPlaceholder,hasRadius:hasRadius,minRadius:minRadius,maxRadius:maxRadius,radiusStep:radiusStep,renderRadiusLabel:renderRadiusLabel,onRemoveLocation:onRemoveLocation,doneLabel:doneLabel,clearTooltipLabel:clearTooltipLabel,country:country,withoutLocationCards:withoutLocationCards,initialMapAddress:initialMapAddress,defaultHighlight:defaultHighlight,placeTypes:placeTypes,noSuggestionsPlaceholder:noSuggestionsPlaceholder,showCountryInSuggestions:showCountryInSuggestions,onLocationAutocompleteError:onLocationAutocompleteError,onUpdateLocation:onUpdateLocation,onRemoveAllLocations:onRemoveAllLocations,selectedLocations:selectedLocations,getMarkers:function getMarkers(){return selectedLocations.map((function(location){return{description:location.description,center:location.center,radius:hasRadius?(0,utils.S0)(location.radius,radiusUnits):0}}))},onAddLocation:function handleAddLocation(location){return(0,utils.lK)(location.place_id).then((function(center){var lng=center.lng(),lat=center.lat(),isLocationSelected=selectedLocations.map((function(item){return item.place_id})).includes(location.place_id),locationToAdd=LocationSelector_assign(LocationSelector_assign({},location),{id:location.place_id,center:{lat:lat,lng:lng},radius:hasRadius&&radiusDefaultValue?radiusDefaultValue:0});isLocationSelected||(shouldGetAddressInfo?(0,utils.Jr)({lat:lat,lng:lng}).then((function(_a){var address_components=_a.address_components;onAddLocation(LocationSelector_assign(LocationSelector_assign({},locationToAdd),{addressComponents:address_components}))})):onAddLocation(locationToAdd))})).catch()},onCloseModal:handleCloseModal}))))};LocationSelector_LocationSelector.displayName="LocationSelector";try{LocationSelector_LocationSelector.displayName="LocationSelector",LocationSelector_LocationSelector.__docgenInfo={description:"",displayName:"LocationSelector",props:{id:{defaultValue:null,description:"define id for input element",name:"id",required:!1,type:{name:"string"}},openOnEnterPress:{defaultValue:{value:"true"},description:"defines if selector has an option of opening the modal window by pressing Enter button",name:"openOnEnterPress",required:!1,type:{name:"boolean"}},radiusDefaultValue:{defaultValue:{value:"1"},description:"default radius value",name:"radiusDefaultValue",required:!1,type:{name:"number"}},radiusUnits:{defaultValue:null,description:"radius measurement unit",name:"radiusUnits",required:!0,type:{name:"enum",value:[{value:'"km"'},{value:'"mi"'}]}},country:{defaultValue:{value:"undefined"},description:"country where search can take place",name:"country",required:!1,type:{name:"string"}},shouldGetAddressInfo:{defaultValue:{value:"false"},description:"defines if an additional request should be done in order to get address information for selected location",name:"shouldGetAddressInfo",required:!1,type:{name:"boolean"}},modalContentLabel:{defaultValue:null,description:"A title for the modal that will be used by screenreaders",name:"modalContentLabel",required:!0,type:{name:"string"}},inputPlaceholder:{defaultValue:null,description:"placeholder for both main field and autocomplete field in modal",name:"inputPlaceholder",required:!0,type:{name:"string"}},modalInputPlaceholder:{defaultValue:null,description:"placeholder for autocomplete field inside the modal. If not given inputPlaceholder will be used",name:"modalInputPlaceholder",required:!1,type:{name:"string"}},selectionPlaceholder:{defaultValue:null,description:"string to be displayed in FieldWrapper when the modal is closed, but locations are selected",name:"selectionPlaceholder",required:!1,type:{name:"string"}},clearTooltipLabel:{defaultValue:null,description:"label to be used for Clear buttons of the component",name:"clearTooltipLabel",required:!0,type:{name:"string"}},onRemoveAllLocations:{defaultValue:null,description:"callback function for the Clear button click",name:"onRemoveAllLocations",required:!0,type:{name:"() => void"}},onBlur:{defaultValue:{value:"() => null"},description:"callback function for closed modal",name:"onBlur",required:!1,type:{name:"(() => void)"}},apiKey:{defaultValue:null,description:"Google api key",name:"apiKey",required:!0,type:{name:"string"}},language:{defaultValue:null,description:"language in which suggestions should be displayed",name:"language",required:!0,type:{name:"string"}},region:{defaultValue:{value:"undefined"},description:"Regional setting for the map. By default Google uses US.\nFor details see: https://developers.google.com/maps/documentation/javascript/localization#Region",name:"region",required:!1,type:{name:"string"}},additionalGoogleProps:{defaultValue:{value:"undefined"},description:"other props to pass to the google loader. For details see: https://react-google-maps-api-docs.netlify.com/#loadscriptnext",name:"additionalGoogleProps",required:!1,type:{name:"LoadScriptNextProps"}},withoutLocationCards:{defaultValue:{value:"false"},description:"defines if location cards should be rendered or not",name:"withoutLocationCards",required:!1,type:{name:"boolean"}},selectedLocations:{defaultValue:{value:"[]"},description:"stores an array of selected location objects",name:"selectedLocations",required:!1,type:{name:"LocationSelectorLocation[]"}},renderRadiusLabel:{defaultValue:null,description:"radius label renderer e.g. radius => `+ ${radius} km`",name:"renderRadiusLabel",required:!0,type:{name:"(radius: number) => string"}},initialMapAddress:{defaultValue:{value:"undefined"},description:"address to make initial map centering more specific",name:"initialMapAddress",required:!1,type:{name:"string"}},onLocationAutocompleteError:{defaultValue:{value:"() => null"},description:"function to be executed if error occurs while fetching suggestions",name:"onLocationAutocompleteError",required:!1,type:{name:"((status: PlacesServiceStatus) => void)"}},doneLabel:{defaultValue:null,description:"label for the Done button",name:"doneLabel",required:!0,type:{name:"string"}},onAddLocation:{defaultValue:null,description:"function called with location object as an argument when it is selected from the suggestions",name:"onAddLocation",required:!0,type:{name:"(location: LocationSelectorLocation) => void"}},onUpdateLocation:{defaultValue:null,description:"function called with a location details as an argument to be changed",name:"onUpdateLocation",required:!0,type:{name:"(locationId: string | undefined, radius: number) => void"}},onRemoveLocation:{defaultValue:null,description:"function with a locationId as an argument to be removed",name:"onRemoveLocation",required:!0,type:{name:"(locationId: string | undefined) => void"}},getMarkers:{defaultValue:null,description:"function to calculate marker positions in Map",name:"getMarkers",required:!1,type:{name:"(() => CircularMarker[])"}},onCloseModal:{defaultValue:null,description:"function to be called when teh Done button is clicked",name:"onCloseModal",required:!1,type:{name:"(() => void)"}},defaultHighlight:{defaultValue:{value:"undefined"},description:"A geoJson description of the area that should be highlighted when there are no other markers present",name:"defaultHighlight",required:!1,type:{name:"GeoJsonObject"}},locationId:{defaultValue:null,description:"Location id",name:"locationId",required:!1,type:{name:"string"}},hasRadius:{defaultValue:null,description:"Defines if location card has a radius slider",name:"hasRadius",required:!1,type:{name:"boolean"}},sliderLabel:{defaultValue:null,description:"Slider indication string for displaying its formatted value",name:"sliderLabel",required:!1,type:{name:"string"}},minRadius:{defaultValue:{value:"1"},description:"The minimum value of the distance slider",name:"minRadius",required:!1,type:{name:"number"}},maxRadius:{defaultValue:{value:"100"},description:"The maximum value of the distance slider",name:"maxRadius",required:!1,type:{name:"number"}},radiusStep:{defaultValue:{value:"1"},description:"Value to be added or subtracted on each step the distance slider makes.\nMust be greater than zero, and max - min should be evenly divisible by the step value.",name:"radiusStep",required:!1,type:{name:"number"}},onRadiusChange:{defaultValue:null,description:"Slider value change callback",name:"onRadiusChange",required:!1,type:{name:"((locationId: string, radius: number) => void)"}},isFocused:{defaultValue:null,description:"trigger of the initial focus of the input field",name:"isFocused",required:!1,type:{name:"boolean"}},noSuggestionsPlaceholder:{defaultValue:null,description:"to be shown when no suggestions are available",name:"noSuggestionsPlaceholder",required:!0,type:{name:"string"}},placeTypes:{defaultValue:{value:"['(regions)']"},description:"type of locations that should be searched for.\nFor details see: https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#AutocompletionRequest.types",name:"placeTypes",required:!1,type:{name:"string[]"}},showCountryInSuggestions:{defaultValue:null,description:"show state and country in suggestions list",name:"showCountryInSuggestions",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/LocationSelector/LocationSelector.tsx#LocationSelector"]={docgenInfo:LocationSelector_LocationSelector.__docgenInfo,name:"LocationSelector",path:"src/components/LocationSelector/LocationSelector.tsx#LocationSelector"})}catch(__react_docgen_typescript_loader_error){}var ensureApiKey=__webpack_require__("./stories/utils/ensureApiKey.ts"),gadm36_NLD_0=__webpack_require__("./stories/static/gadm36_NLD_0.json"),LocationSelector_stories_assign=function(){return LocationSelector_stories_assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},LocationSelector_stories_assign.apply(this,arguments)},LocationSelector_stories={title:"Organisms/LocationSelector",component:LocationSelector_LocationSelector,argTypes:{defaultHighlight:{options:["true","false"],mapping:{true:gadm36_NLD_0,false:void 0}}}},Basic={name:"Basic",args:{className:"test-class",selectedLocations:[{id:"ajdo-219a-j19v-0491",place_id:"ajdo-219a-j19v-0491",description:"Amsterdam",center:{lng:4.894539799999961,lat:52.3666969},radius:42},{id:"ajdo-219a-j19v-0492",place_id:"ajdo-219a-j19v-0492",description:"Utrecht",center:{lng:5.121420100000023,lat:52.09073739999999},radius:20}],country:"NL",language:"EN",region:"NL",initialMapAddress:"",radiusUnits:"km",renderRadiusLabel:function renderRadiusLabel(r){return"+ ".concat(r," km")},hasRadius:!0,minRadius:1,maxRadius:100,radiusStep:1,modalContentLabel:"Location selection",inputPlaceholder:"Location...",modalInputPlaceholder:"",noSuggestionsPlaceholder:"noSuggestionsPlaceholder",selectionPlaceholder:"selectionPlaceholder",doneLabel:"Done",clearTooltipLabel:"Clear"},render:function render(args){var apiKey=(0,ensureApiKey.y)();return react.createElement(LocationSelector_LocationSelector,LocationSelector_stories_assign({},args,{apiKey:apiKey||""}))}},Template=function Template(args){var apiKey=(0,ensureApiKey.y)(),_a=react.useState([]),selectedLocations=_a[0],setSelectedLocations=_a[1];return react.createElement(LocationSelector_LocationSelector,LocationSelector_stories_assign({},args,{apiKey:apiKey||"",selectedLocations:selectedLocations,selectionPlaceholder:function getPlaceholder(){return selectedLocations.map((function(item){return item.structured_formatting.main_text})).join(", ")||void 0}(),onAddLocation:function handleAddLocation(location){console.log("onAddLocation was called with:",location),setSelectedLocations([location])},onUpdateLocation:function handleUpdateLocation(id,radius){console.log("onUpdateLocation was called",id,radius);var newSelection=selectedLocations.map((function(loc){return loc.id===id&&(loc.radius=radius),loc}));setSelectedLocations(newSelection)},onRemoveLocation:function handleRemoveLocation(id){console.log("onRemoveLocation was called",id),setSelectedLocations(selectedLocations.filter((function(l){return l.id!==id})))},onRemoveAllLocations:function handleRemoveAllLocations(){console.log("onRemoveAllLocations was called"),setSelectedLocations([])},onBlur:function onBlur(){console.log("onBlur was called")},onLocationAutocompleteError:function onLocationAutocompleteError(){return console.log("onLocationAutocompleteError was called")}}))},SingleSelect={name:"SingleSelect",args:{withoutLocationCards:!0,region:"NL",country:"NL",language:"EN",initialMapAddress:"Netherlands",radiusUnits:"km",renderRadiusLabel:function renderRadiusLabel(r){return"+ ".concat(r," km")},hasRadius:!0,minRadius:1,maxRadius:100,radiusDefaultValue:5,radiusStep:1,placeTypes:["(regions)"],openOnEnterPress:!0,shouldGetAddressInfo:!1,showCountryInSuggestions:!0,modalContentLabel:"Location selection",inputPlaceholder:"Location...",modalInputPlaceholder:"",noSuggestionsPlaceholder:"noSuggestionsPlaceholder",doneLabel:"Done",clearTooltipLabel:"Clear"},render:Template},MultiSelect={name:"MultiSelect",args:{region:"NL",country:"NL",language:"EN",initialMapAddress:"Netherlands",radiusUnits:"km",renderRadiusLabel:function renderRadiusLabel(r){return"+ ".concat(r," km")},hasRadius:!0,minRadius:1,maxRadius:100,radiusDefaultValue:5,radiusStep:1,placeTypes:["(regions)"],openOnEnterPress:!0,shouldGetAddressInfo:!1,showCountryInSuggestions:!0,modalContentLabel:"Location selection",inputPlaceholder:"Location...",modalInputPlaceholder:"",noSuggestionsPlaceholder:"noSuggestionsPlaceholder",doneLabel:"Done",clearTooltipLabel:"Clear"},render:Template};Basic.parameters={...Basic.parameters,docs:{...Basic.parameters?.docs,source:{originalSource:"{\n  name: 'Basic',\n  args: {\n    className: 'test-class',\n    selectedLocations: mockSelectedLocations,\n    country: 'NL',\n    language: 'EN',\n    region: 'NL',\n    initialMapAddress: '',\n    radiusUnits: 'km',\n    renderRadiusLabel: r => `+ ${r} km`,\n    hasRadius: true,\n    minRadius: 1,\n    maxRadius: 100,\n    radiusStep: 1,\n    modalContentLabel: 'Location selection',\n    inputPlaceholder: 'Location...',\n    modalInputPlaceholder: '',\n    noSuggestionsPlaceholder: 'noSuggestionsPlaceholder',\n    selectionPlaceholder: 'selectionPlaceholder',\n    doneLabel: 'Done',\n    clearTooltipLabel: 'Clear'\n  },\n  render: args => {\n    const apiKey = ensureApiKey();\n    return <LocationSelector {...args as LocationSelectorProps} apiKey={apiKey || ''} />;\n  }\n}",...Basic.parameters?.docs?.source}}},SingleSelect.parameters={...SingleSelect.parameters,docs:{...SingleSelect.parameters?.docs,source:{originalSource:"{\n  name: 'SingleSelect',\n  args: {\n    withoutLocationCards: true,\n    region: 'NL',\n    country: 'NL',\n    language: 'EN',\n    initialMapAddress: 'Netherlands',\n    radiusUnits: 'km',\n    renderRadiusLabel: r => `+ ${r} km`,\n    hasRadius: true,\n    minRadius: 1,\n    maxRadius: 100,\n    radiusDefaultValue: 5,\n    radiusStep: 1,\n    placeTypes: ['(regions)'],\n    openOnEnterPress: true,\n    shouldGetAddressInfo: false,\n    showCountryInSuggestions: true,\n    modalContentLabel: 'Location selection',\n    inputPlaceholder: 'Location...',\n    modalInputPlaceholder: '',\n    noSuggestionsPlaceholder: 'noSuggestionsPlaceholder',\n    doneLabel: 'Done',\n    clearTooltipLabel: 'Clear'\n  },\n  render: Template\n}",...SingleSelect.parameters?.docs?.source}}},MultiSelect.parameters={...MultiSelect.parameters,docs:{...MultiSelect.parameters?.docs,source:{originalSource:"{\n  name: 'MultiSelect',\n  args: {\n    region: 'NL',\n    country: 'NL',\n    language: 'EN',\n    initialMapAddress: 'Netherlands',\n    radiusUnits: 'km',\n    renderRadiusLabel: r => `+ ${r} km`,\n    hasRadius: true,\n    minRadius: 1,\n    maxRadius: 100,\n    radiusDefaultValue: 5,\n    radiusStep: 1,\n    placeTypes: ['(regions)'],\n    openOnEnterPress: true,\n    shouldGetAddressInfo: false,\n    showCountryInSuggestions: true,\n    modalContentLabel: 'Location selection',\n    inputPlaceholder: 'Location...',\n    modalInputPlaceholder: '',\n    noSuggestionsPlaceholder: 'noSuggestionsPlaceholder',\n    doneLabel: 'Done',\n    clearTooltipLabel: 'Clear'\n  },\n  render: Template\n}",...MultiSelect.parameters?.docs?.source}}};const __namedExportsOrder=["Basic","SingleSelect","MultiSelect"]},"./src/components/LocationCard/LocationCard.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{u:function(){return LocationCard_LocationCard}});var react=__webpack_require__("./node_modules/react/index.js"),bem=__webpack_require__("./src/utils/bem/bem.js"),Slider=__webpack_require__("./src/components/Sliders/Slider/Slider.tsx"),Text=__webpack_require__("./src/components/Text/Text.tsx"),style_related=__webpack_require__("./src/constants/style-related.ts"),__assign=function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)},__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t},_a=(0,bem.T)("LocationCard",{LocationCard:"LocationCard--p5MP7wjfm8",LocationCard__header:"LocationCard__header--aLnqfUYuxT",LocationCard__title:"LocationCard__title--cqp7ZRzotv",LocationCard__deleteButton:"LocationCard__deleteButton--BNDszBFk8P",LocationCard__slider:"LocationCard__slider--ue5dDEVXz3",LocationCard__sliderLabel:"LocationCard__sliderLabel--AiaepLGj11"}),block=_a.block,elem=_a.elem,LocationCard_LocationCard=function LocationCard(_a){var _b=_a.As,As=void 0===_b?"div":_b,_c=_a.locationId,locationId=void 0===_c?void 0:_c,locationTitle=_a.locationTitle,_d=_a.hasRadius,hasRadius=void 0!==_d&&_d,distanceRadius=_a.distanceRadius,_e=_a.sliderLabel,sliderLabel=void 0===_e?"":_e,_f=_a.minRadius,minRadius=void 0===_f?1:_f,_g=_a.maxRadius,maxRadius=void 0===_g?100:_g,_h=_a.radiusStep,radiusStep=void 0===_h?1:_h,_j=_a.onRadiusChange,onRadiusChange=void 0===_j?function(){}:_j,onDelete=_a.onDelete,rest=__rest(_a,["As","locationId","locationTitle","hasRadius","distanceRadius","sliderLabel","minRadius","maxRadius","radiusStep","onRadiusChange","onDelete"]);return react.createElement(As,__assign({},rest,block(__assign({},rest))),react.createElement("div",__assign({},elem("header")),react.createElement(Text.E,__assign({title:locationTitle,size:style_related.ng[2]},elem("title")),locationTitle),react.createElement("button",__assign({onClick:function handleDelete(){return onDelete(locationId)},type:"button"},elem("deleteButton")),"×")),hasRadius&&react.createElement("div",__assign({},elem("slider")),react.createElement(Slider.A,{value:distanceRadius,min:minRadius,max:maxRadius,step:radiusStep,onChange:function handleRadiusChange(radius){return onRadiusChange(locationId,radius)}}),react.createElement(Text.E,__assign({size:style_related.ng[0]},elem("sliderLabel")),sliderLabel)))};LocationCard_LocationCard.displayName="LocationCard";try{LocationCard_LocationCard.displayName="LocationCard",LocationCard_LocationCard.__docgenInfo={description:"",displayName:"LocationCard",props:{locationId:{defaultValue:{value:"undefined"},description:"Location id",name:"locationId",required:!1,type:{name:"string"}},locationTitle:{defaultValue:null,description:"Location card title",name:"locationTitle",required:!0,type:{name:"string"}},hasRadius:{defaultValue:{value:"false"},description:"Defines if location card has a radius slider",name:"hasRadius",required:!1,type:{name:"boolean"}},sliderLabel:{defaultValue:{value:""},description:"Slider indication string for displaying its formatted value",name:"sliderLabel",required:!1,type:{name:"string"}},minRadius:{defaultValue:{value:"1"},description:"The minimum value of the distance slider",name:"minRadius",required:!1,type:{name:"number"}},maxRadius:{defaultValue:{value:"100"},description:"The maximum value of the distance slider",name:"maxRadius",required:!1,type:{name:"number"}},radiusStep:{defaultValue:{value:"1"},description:"Value to be added or subtracted on each step the distance slider makes.\nMust be greater than zero, and max - min should be evenly divisible by the step value.",name:"radiusStep",required:!1,type:{name:"number"}},distanceRadius:{defaultValue:null,description:"The value to be displayed in the slider",name:"distanceRadius",required:!0,type:{name:"number"}},onRadiusChange:{defaultValue:{value:"() => undefined"},description:"Slider value change callback",name:"onRadiusChange",required:!1,type:{name:"((locationId: string, radius: number) => void)"}},onDelete:{defaultValue:null,description:"Location card delete callback",name:"onDelete",required:!0,type:{name:"(locationId: string | undefined) => void"}},As:{defaultValue:{value:"div"},description:"HTML tag to be used as a wrapping component",name:"As",required:!1,type:{name:"enum",value:[{value:'"div"'},{value:'"li"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/LocationCard/LocationCard.tsx#LocationCard"]={docgenInfo:LocationCard_LocationCard.__docgenInfo,name:"LocationCard",path:"src/components/LocationCard/LocationCard.tsx#LocationCard"})}catch(__react_docgen_typescript_loader_error){}},"./src/components/LocationSelector/utils.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{Jr:function(){return convertCoordinatesIntoAddress},OF:function(){return initGoogleMapServices},S0:function(){return getRadiusInMeters},bF:function(){return GOOGLE_API_LIBRARIES},lK:function(){return findGeoCenterForPlaceId}});var _googlemaps_js_api_loader__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@googlemaps/js-api-loader/dist/index.mjs"),__assign=function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)},GOOGLE_API_LIBRARIES=["places"],initGoogleMapServices=function initGoogleMapServices(options){var _a;return(null===(_a=null===window||void 0===window?void 0:window.google)||void 0===_a?void 0:_a.maps)?Promise.resolve():new _googlemaps_js_api_loader__WEBPACK_IMPORTED_MODULE_0__.aH(__assign({libraries:GOOGLE_API_LIBRARIES},options)).load()},getRadiusInMeters=function getRadiusInMeters(radius,radiusUnits){return"km"===radiusUnits?1e3*radius:1609.34*radius},findGeoCenterForPlaceId=function findGeoCenterForPlaceId(placeId){var _a;if(!(null===(_a=null===window||void 0===window?void 0:window.google)||void 0===_a?void 0:_a.maps))return Promise.reject(new Error("Google maps is not initialized"));var geocoder=new(0,window.google.maps.Geocoder);return new Promise((function(resolve,reject){geocoder.geocode({placeId:placeId},(function(results,status){"OK"===status?results&&results[0]?resolve(results[0].geometry.location):reject(new Error("No results found when searching for placeId ".concat(placeId))):reject(new Error("Geocoder failed due to: ".concat(status)))}))}))},convertCoordinatesIntoAddress=function convertCoordinatesIntoAddress(location){var _a;if(!(null===(_a=null===window||void 0===window?void 0:window.google)||void 0===_a?void 0:_a.maps))return Promise.reject(new Error("Google maps is not initialized"));var geocoder=new(0,window.google.maps.Geocoder);return new Promise((function(resolve,reject){geocoder.geocode({location:location},(function(results,status){"OK"===status?results&&results[0]?resolve(results[0]):reject(new Error("No results found when searching for coordinates ".concat(location.lat,", ").concat(location.lng))):reject(new Error("Geocoder failed due to: ".concat(status)))}))}))}},"./src/components/Modal/Modal.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{a:function(){return Modal_Modal}});var react=__webpack_require__("./node_modules/react/index.js"),lib=__webpack_require__("./node_modules/react-modal/lib/index.js"),lib_default=__webpack_require__.n(lib),bem=__webpack_require__("./src/utils/bem/bem.js"),__assign=function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)},__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t},_a=(0,bem.T)("Modal",{Modal__body:"Modal__body--ZokKRiYv_G",Modal__overlay:"Modal__overlay--amDLTGJGG2","Modal__overlay--entered":"Modal__overlay--entered--XW7tBdB9rB","Modal__overlay--exited":"Modal__overlay--exited--QixavPj_FD",Modal__content:"Modal__content--YyqNA2fQuZ","Modal__content--isPositionFixed":"Modal__content--isPositionFixed--mY728wRoPt","Modal__content--entered":"Modal__content--entered--Ngq07Jvh75","Modal__content--exited":"Modal__content--exited--zlVgNdbaxe"}),block=_a.block,elem=_a.elem,Modal_Modal=function Modal(_a){var children=_a.children,isOpen=_a.isOpen,contentLabel=_a.contentLabel,onRequestClose=_a.onRequestClose,className=_a.className,portalClassName=_a.portalClassName,overlayClassName=_a.overlayClassName,_b=_a.isPositionFixed,isPositionFixed=void 0!==_b&&_b,rest=__rest(_a,["children","isOpen","contentLabel","onRequestClose","className","portalClassName","overlayClassName","isPositionFixed"]),overlayRef=react.useRef(null),portalClass=block(__assign({className:portalClassName},rest)).className,bodyOpenClass=elem("body").className,overlayClass=elem("overlay",{elemClassName:overlayClassName}).className,overlayEnteredClass=elem("overlay--entered").className,overlayExitedClass=elem("overlay--exited").className,contentClass=elem("content",{isPositionFixed:isPositionFixed,elemClassName:className}).className,contentEnteredClass=elem("content--entered").className,contentExitedClass=elem("content--exited").className;return react.createElement(lib_default(),__assign({isOpen:isOpen,contentLabel:contentLabel,onRequestClose:onRequestClose,closeTimeoutMS:300,bodyOpenClassName:bodyOpenClass,portalClassName:portalClass,overlayClassName:{base:overlayClass,afterOpen:overlayEnteredClass,beforeClose:overlayExitedClass},className:{base:contentClass,afterOpen:contentEnteredClass,beforeClose:contentExitedClass},overlayRef:function setOverlayRef(node){overlayRef.current=node},onAfterOpen:function onAfterOpen(){overlayRef.current&&(overlayRef.current.scrollTop=0)}},rest),children)};Modal_Modal.setAppElement=function(selector){lib_default().setAppElement(selector)},Modal_Modal.displayName="Modal";try{Modal_Modal.displayName="Modal",Modal_Modal.__docgenInfo={description:"## Usage information\nThis component is a wrapper around [react-modal](http://reactcommunity.org/react-modal/#usage).\n\n* You can pass other props according to their definition, apart from classes.\n* For accessibility reasons you need to __initialize__ modal use in your app.\n\nFor more info see [app element](http://reactcommunity.org/react-modal/accessibility/#app-element)\nin their documentation. To do this call the following function once:\n\n     `__Modal.setAppElement__(appElementSelector);`",displayName:"Modal",props:{children:{defaultValue:null,description:"elements to be rendered within the modal",name:"children",required:!0,type:{name:"ReactNode"}},isOpen:{defaultValue:null,description:"The state of the modal",name:"isOpen",required:!0,type:{name:"boolean"}},contentLabel:{defaultValue:null,description:"A title for the modal that will be used by screenreaders",name:"contentLabel",required:!0,type:{name:"string"}},onRequestClose:{defaultValue:null,description:"A function to be called when the modal is closed",name:"onRequestClose",required:!1,type:{name:"((event: MouseEvent<Element, MouseEvent> | KeyboardEvent<Element>) => void)"}},isPositionFixed:{defaultValue:{value:"false"},description:"When true the content of the modal will be scrollable, but the modal itself will stayed fixed inside the viewport",name:"isPositionFixed",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"Additional class to be applied to the content part",name:"className",required:!1,type:{name:"string"}},overlayClassName:{defaultValue:null,description:"Additional class to be applied to the overlay",name:"overlayClassName",required:!1,type:{name:"string"}},portalClassName:{defaultValue:null,description:"Additional class to be applied to the portal",name:"portalClassName",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Modal/Modal.tsx#Modal"]={docgenInfo:Modal_Modal.__docgenInfo,name:"Modal",path:"src/components/Modal/Modal.tsx#Modal"})}catch(__react_docgen_typescript_loader_error){}},"./src/components/Sliders/Slider/Slider.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{A:function(){return Slider}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),rc_slider_lib_Slider__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rc-slider/lib/Slider.js"),__assign=(__webpack_require__("./src/components/Sliders/Slider.scss"),function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)}),Slider=function Slider(props){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(rc_slider_lib_Slider__WEBPACK_IMPORTED_MODULE_1__.A,__assign({},props))};Slider.displayName="Slider";try{Slider.displayName="Slider",Slider.__docgenInfo={description:"## Usage information\nThis component is a wrapper around [rc-slider](https://github.com/react-component/slider).\nFull list of props available to pass you can find [here](https://github.com/react-component/slider#api).",displayName:"Slider",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Sliders/Slider/Slider.tsx#Slider"]={docgenInfo:Slider.__docgenInfo,name:"Slider",path:"src/components/Sliders/Slider/Slider.tsx#Slider"})}catch(__react_docgen_typescript_loader_error){}},"./src/constants/style-related.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{F0:function(){return SIZES},Jo:function(){return CONTEXTS},lm:function(){return COLORS},ng:function(){return OLD_SIZES}});var __spreadArray=function(to,from,pack){if(pack||2===arguments.length)for(var ar,i=0,l=from.length;i<l;i++)!ar&&i in from||(ar||(ar=Array.prototype.slice.call(from,0,i)),ar[i]=from[i]);return to.concat(ar||Array.prototype.slice.call(from))},CONTEXTS=__spreadArray(["info"],["success","cautious","critical"],!0),SIZES=["small","medium","large"],OLD_SIZES=["small","normal","large"],COLORS=["#AFF5E2","#D6F481","#FFF16B","#FFD571","#FFC4A6","#E5DAC9","#ECCBFF","#FFC5EB","#FCC1CF","#C4D7FC","#ADDDFF","#75DFFB"]},"./src/components/Sliders/Slider.scss":function(){}}]);