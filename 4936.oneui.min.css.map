{"version":3,"file":"4936.oneui.min.css","mappings":"AAAA;AC6DA;ACnDA;AEAA;ACRA;AHQA;AIVA","sources":["webpack://@textkernel/oneui/./src/components/Dropdown/Items/Item.scss","webpack://@textkernel/oneui/./src/components/PrioritySelector/PrioritySelector.scss","webpack://@textkernel/oneui/./src/components/Buttons/Button/Button.scss","webpack://@textkernel/oneui/./src/components/Buttons/IconButton/IconButton.scss","webpack://@textkernel/oneui/./src/components/LoadingSpinner/LoadingSpinner.scss","webpack://@textkernel/oneui/./src/components/Text/Text.scss","webpack://@textkernel/oneui/./src/components/Dropdown/Dropdown.scss"],"sourcesContent":[".DropdownItem {\n    display: flex;\n    align-items: center;\n    padding: var(--space-150);\n    composes: OneUI-label-text from global;\n    gap: var(--space-100);\n    cursor: default;\n\n    &--withChevron {\n        justify-content: space-between;\n    }\n\n    &:focus-visible {\n        outline: 2px solid var(--color-info-20, #99caff);\n    }\n\n    &:hover {\n        background: var(--color-background-neutral-subtlest-hover, #e6e6e6);\n        outline: none;\n    }\n\n    &:active {\n        background: var(--color-background-neutral-subtlest-pressed, #ccc);\n    }\n\n    &--disabled {\n        color: var(--color-text-disabled);\n        cursor: not-allowed;\n\n        &:focus-visible,\n        &:hover,\n        &:active {\n            background: var(--color-background-neutral-subtlest-disabled, #fff);\n        }\n    }\n\n    &--isSelected {\n        color: var(--color-text-selected-default, #004999);\n\n        &.DropdownItem--disabled {\n            color: var(--color-link-default, #0062cc);\n            cursor: not-allowed;\n        }\n    }\n\n    &--isSelected.DropdownItem {\n        background: var(--color-background-selected-subtlest-default, #e6f2ff);\n\n        &:hover:not(.DropdownItem--disabled) {\n            background: var(--color-background-selected-subtlest-hover, #cce4ff);\n        }\n\n        &:active:not(.DropdownItem--disabled) {\n            border: 2px solid black;\n            background: var(--color-background-selected-subtlest-pressed, #99caff);\n        }\n\n        &.DropdownItem--disabled {\n            &:focus-visible,\n            &:hover,\n            &:active {\n                background: var(--color-background-selected-subtlest-default, #e6f2ff);\n            }\n        }\n    }\n}\n","@use 'sass:map';\n@mixin common-button-style(\n    $hoverColor: var(--color-background-neutral-subtlest-hover),\n    $activeColor: var(--color-background-neutral-subtlest-pressed)\n) {\n    & {\n        width: var(--space-400);\n        height: var(--space-400);\n        align-items: center;\n        background-color: var(--transparent);\n        cursor: pointer;\n        display: flex;\n        flex-shrink: 0;\n        justify-content: center;\n    }\n    &:hover:not([disabled]) {\n        background-color: $hoverColor;\n    }\n    &:active:not([disabled]) {\n        background-color: $activeColor;\n    }\n    &[disabled] {\n        cursor: not-allowed;\n    }\n}\n@mixin selected-state(\n    $selectedColor: var(--color-background-selected-subtlest-default),\n    $hoverColor: var(--color-background-selected-subtlest-hover),\n    $activeColor: var(--color-background-selected-subtlest-pressed)\n) {\n    & {\n        background-color: $selectedColor;\n    }\n    &:hover:not([disabled]) {\n        background-color: $hoverColor;\n    }\n    &:active:not([disabled]) {\n        background-color: $activeColor;\n    }\n    &[disabled] {\n        background-color: $selectedColor;\n    }\n}\n$icon-status-colors: (\n    mandatory: (\n        normal: var(--color-icon-success-default),\n        disabled: var(--color-icon-success-disabled),\n    ),\n    important: (\n        normal: var(--color-icon-cautious-default),\n        disabled: var(--color-icon-cautious-disabled),\n    ),\n    optional: (\n        normal: var(--color-icon-subtle),\n        disabled: var(--color-icon-disabled),\n    ),\n    exclude: (\n        normal: var(--color-icon-critical-default),\n        disabled: var(--color-icon-critical-disabled),\n    ),\n);\n.PrioritySelector {\n    width: 100%;\n    @each $status, $colors in $icon-status-colors {\n        &--#{$status} {\n            fill: map.get($colors, normal);\n            &[disabled] {\n                fill: map.get($colors, disabled);\n            }\n        }\n    }\n\n    &__icon {\n        outline: none;\n        min-height: 20px;\n        min-width: 20px;\n        @each $status, $colors in $icon-status-colors {\n            &--#{$status} {\n                fill: map.get($colors, normal);\n                &[disabled] {\n                    fill: map.get($colors, disabled);\n                }\n            }\n        }\n\n        &--inList {\n            height: 20px;\n            width: 20px;\n        }\n    }\n    &__priorityButton--isSelected,\n    &__optionButton--isSelected {\n        @include selected-state();\n    }\n\n    &__badgeListItem {\n        display: flex;\n        align-items: center;\n        justify-content: flex-start;\n        gap: var(--space-100);\n    }\n    &__badgeDropdownList {\n        max-width: 400px;\n        border-radius: var(--space-100);\n        overflow: hidden;\n        background-color: white;\n        z-index: 600;\n\n        &--fixedWidth {\n            width: 232px;\n        }\n    }\n}\n","@use 'sass:map';\n$contexts: (primary, secondary, critical);\n$variants: (filled, outlined, ghost);\n\n$contextMap: (\n    'secondary': 'neutral',\n    'primary': 'brand',\n    'critical': 'critical',\n);\n\n@keyframes buttonLoading {\n    0% {\n        background-position: 100% 0;\n    }\n    100% {\n        background-position: -100% 0;\n    }\n}\n.Button {\n    font-family: inherit;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: var(--space-75);\n    border: none;\n    height: var(--space-400);\n    box-sizing: border-box;\n    cursor: pointer;\n    composes: OneUI-label-text-bold from global;\n    text-decoration: none;\n    margin: 0;\n    outline: none;\n    padding: var(--space-0) var(--space-150);\n    text-align: center;\n    transition: all var(--transition-duration);\n    white-space: nowrap;\n    flex-wrap: nowrap;\n\n    // Default variant (filled) and context (primary)\n    background-color: var(--color-background-brand-bold-default);\n    color: var(--color-background);\n\n    &:hover {\n        background-color: var(--color-background-brand-bold-hover);\n    }\n    &:active {\n        background-color: var(--color-background-critical-bold-pressed);\n    }\n    &:focus-visible {\n        box-shadow: 0px 0px 0px 2px var(--color-background-info-subtlest-pressed);\n    }\n\n    &[disabled],\n    &--isLoading {\n        cursor: not-allowed;\n        pointer-events: none;\n        background-color: var(--color-background-brand-bold-disabled);\n        color: var(--color-text-inverse);\n    }\n\n    &--isBlock {\n        width: 100%;\n    }\n\n    &--size {\n        &_small {\n            border-radius: var(--space-50);\n            height: var(--space-300);\n            padding: var(--space-0) var(--space-100);\n        }\n        &_large {\n            border-radius: var(--space-100);\n            height: var(--space-500);\n            padding: var(--space-0) var(--space-200);\n        }\n    }\n}\n\n@each $context in $contexts {\n    @each $variant in $variants {\n        $mappedContext: map.get($contextMap, $context);\n        .Button--context_#{$context}.Button--variant_#{$variant} {\n            @if $variant == filled {\n                &:hover {\n                    background-color: var(--color-background-#{$mappedContext}-subtlest-hover);\n                }\n                &:active {\n                    background-color: var(--color-background-#{$mappedContext}-subtlest-pressed);\n                }\n                @if $mappedContext == neutral {\n                    background-color: var(--color-background-neutral-subtle-default);\n                    color: var(--color-text-bold);\n\n                    &:hover {\n                        background-color: var(--color-background-neutral-subtle-hover);\n                    }\n                    &:active {\n                        background-color: var(--color-background-neutral-subtle-pressed);\n                    }\n                    &[disabled],\n                    &.Button--isLoading {\n                        background-color: var(--color-background-neutral-subtle-disabled);\n                        color: var(--color-text-subtlest);\n                        &:hover,\n                        &:active {\n                            background-color: var(--color-background-neutral-subtle-disabled);\n                        }\n                    }\n                } @else {\n                    background-color: var(--color-background-#{$mappedContext}-bold-default);\n                    color: var(--color-text-inverse);\n\n                    &:hover {\n                        background-color: var(--color-background-#{$mappedContext}-bold-hover);\n                    }\n                    &:active {\n                        background-color: var(--color-background-#{$mappedContext}-bold-pressed);\n                    }\n                    &[disabled],\n                    &.Button--isLoading {\n                        background-color: var(--color-background-#{$mappedContext}-bold-disabled);\n                        &:hover,\n                        &:active {\n                            background-color: var(\n                                --color-background-#{$mappedContext}-bold-disabled\n                            );\n                        }\n                    }\n                }\n            } @else if $variant == outlined {\n                @if $mappedContext == neutral {\n                    color: var(--color-text-subtle);\n                    background-color: transparent;\n                    border-width: var(--line-normal);\n                    border-style: solid;\n                    border-color: var(--color-border-bold);\n\n                    &[disabled],\n                    &.Button--isLoading {\n                        color: var(--color-text-subtlest);\n                        &:hover,\n                        &:active {\n                            background-color: var(--transparent);\n                        }\n                        border-color: var(--color-border-disabled);\n                    }\n                } @else {\n                    color: var(--color-text-#{$mappedContext}-default);\n                    background-color: transparent;\n                    border-width: var(--line-normal);\n                    border-style: solid;\n                    border-color: var(--color-border-#{$mappedContext}-bold-default);\n\n                    &[disabled],\n                    &.Button--isLoading {\n                        color: var(--color-text-#{$mappedContext}-disabled);\n                        &:hover,\n                        &:active {\n                            background-color: var(--transparent);\n                        }\n                        border-color: var(--color-border-#{$mappedContext}-subtle-brand);\n                    }\n                }\n            } @else if $variant == ghost {\n                @if $context == secondary {\n                    color: var(--color-text-subtle);\n                    background-color: var(--transparent);\n\n                    &:hover {\n                        background-color: var(--color-background-neutral-subtlest-hover);\n                    }\n\n                    &:active {\n                        background-color: var(--color-background-neutral-subtlest-pressed);\n                    }\n\n                    &:focus-visible {\n                        box-shadow: 0px 0px 0px 2px var(--color-background-info-subtlest-pressed);\n                    }\n\n                    &[disabled],\n                    &.Button--isLoading {\n                        color: var(--color-text-disabled);\n                        background-color: var(--transparent);\n                        &:hover,\n                        &:active {\n                            background-color: var(--transparent);\n                        }\n                    }\n                } @else {\n                    color: var(--color-text-#{$mappedContext}-default);\n                    background-color: var(--transparent);\n                    &:hover {\n                        background-color: var(--color-background-#{$mappedContext}-subtlest-hover);\n                    }\n                    &:active {\n                        background-color: var(\n                            --color-background-#{$mappedContext}-subtlest-pressed\n                        );\n                    }\n                    &[disabled],\n                    &.Button--isLoading {\n                        color: var(--color-text-#{$mappedContext}-disabled);\n                        &:hover,\n                        &:active {\n                            background-color: var(--transparent);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n","@use '../Button/Button';\n\n.IconButton {\n    &--size {\n        &_small {\n            padding: var(--space-75);\n        }\n        &_medium {\n            padding: var(--space-100);\n        }\n        &_large {\n            padding: var(--space-125);\n        }\n    }\n}\n\n.IconButton__icon {\n    &--size {\n        &_small {\n            width: var(--space-150);\n            height: var(--space-150);\n        }\n        &_medium {\n            width: var(--space-200);\n            height: var(--space-200);\n        }\n        &_large {\n            width: var(--space-250);\n            height: var(--space-250);\n        }\n    }\n}\n","@use \"sass:map\";\n$contexts: (primary, secondary, critical, inverted);\n\n$contextMap: (\n    'secondary': 'neutral',\n    'primary': 'brand',\n    'critical': 'critical',\n    'inverted': 'inverted'\n);\n\n@keyframes rotate {\n    100% {\n        transform: rotate(360deg);\n    }\n}\n\n@keyframes dash {\n    0% {\n        stroke-dasharray: 1, 150;\n        stroke-dashoffset: 0;\n    }\n    50% {\n        stroke-dasharray: 90, 150;\n        stroke-dashoffset: -35;\n    }\n    100% {\n        stroke-dasharray: 90, 150;\n        stroke-dashoffset: -124;\n    }\n}\n\n@mixin center() {\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n}\n\n.LoadingSpinner {\n    display: inline-flex;\n    flex-direction: column;\n    align-items: center;\n\n    &__svg {\n        animation: rotate 2s linear infinite;\n        width: 48px;\n        height: 48px;\n        display: block;\n    }\n\n    &__path {\n        stroke: var(--color-primary-50);\n        stroke-dasharray: 1, 150;\n        stroke-dashoffset: 0;\n        stroke-linecap: round;\n        animation: dash 1.5s ease-in-out infinite;\n        transition: stroke var(--transition-duration);\n        @each $context in $contexts {\n            &--context_#{ $context } {\n                $mappedContext: map.get($contextMap, $context);\n                @if ($mappedContext == 'inverted') {\n                    stroke: var(--color-icon-inverse);\n                } @else if ($mappedContext == 'neutral') {\n                    stroke: var(--color-icon-disabled);\n                } @else {\n                    stroke: var(--color-icon-#{$mappedContext}-disabled);\n                }\n            }  \n        }\n    }\n\n    &__label {\n        display: block;\n        margin-top: var(--space-100);\n    }\n\n    &--centerIn {\n        &_parent {\n            position: absolute;\n            @include center();\n        }\n        &_viewport {\n            position: fixed;\n            @include center();\n        }\n    }\n\n    &--hidden {\n        display: none;\n    }\n}\n",".Text {\n    &--size {\n        &_small {\n            composes: OneUI-caption-text from global;\n        }\n\n        &_medium {\n            composes: OneUI-label-text from global;\n        }\n    }\n\n    &--context {\n        @each $context in (success, cautious, critical, brand) {\n            &_#{ $context } {\n                color: var(--color-text-#{$context}-default);\n            }\n        }\n    }\n\n    &--context_info {\n        color: var(--color-text-info-default);\n    }\n\n    &--context_neutral {\n        color: var(--color-text-subtlest);\n    }\n\n    &--isBold {\n        font-weight: var(--font-weight-bold);\n    }\n}\n",".DropdownContent,\n.DropdownSubContent {\n    border-radius: var(--radius-8, 8px);\n    border: 1px solid var(--color-border-subtlest, #e6e6e6);\n    background: var(--color-background-neutral-subtlest-default, #fff);\n    box-shadow: var(--space-0) var(--space-25) var(--space-125) var(--space-0)\n        var(--color-transparent-10020, rgba(0, 0, 0, 0.2));\n    z-index: 400;\n    box-sizing: border-box;\n}\n"],"names":[],"sourceRoot":""}