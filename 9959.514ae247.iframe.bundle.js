"use strict";(self.webpackChunk_textkernel_oneui=self.webpackChunk_textkernel_oneui||[]).push([[9959],{"./src/components/LocationAutocomplete/LocationAutocomplete.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{q:function(){return LocationAutocomplete_LocationAutocomplete}});var react=__webpack_require__("./node_modules/react/index.js"),index_esm=__webpack_require__("./node_modules/react-icons/fa/index.esm.js"),Autosuggest=__webpack_require__("./src/components/SelectComponents/Autosuggest/Autosuggest.tsx"),bem=__webpack_require__("./src/utils/bem/bem.js"),ListItem=__webpack_require__("./src/components/List/ListItem/ListItem.tsx"),Text=__webpack_require__("./src/components/Text/Text.tsx"),MarkedText=__webpack_require__("./src/components/Text/MarkedText/MarkedText.tsx");function _slicedToArray(r,e){return function _arrayWithHoles(r){if(Array.isArray(r))return r}(r)||function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}(r,e)||function _unsupportedIterableToArray(r,a){if(r){if("string"==typeof r)return _arrayLikeToArray(r,a);var t={}.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(r):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(r,a):void 0}}(r,e)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(r,a){(null==a||a>r.length)&&(a=r.length);for(var e=0,n=Array(a);e<a;e++)n[e]=r[e];return n}var powered_by_google_on_white_namespaceObject=__webpack_require__.p+"static/media/powered_by_google_on_white.46afd78d.png",powered_by_google_on_white_2x_namespaceObject=__webpack_require__.p+"static/media/powered_by_google_on_white@2x.e5a04343.png",powered_by_google_on_white_3x_namespaceObject=__webpack_require__.p+"static/media/powered_by_google_on_white@3x.15b7ee55.png",__assign=function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)},__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t},elem=(0,bem.T)("LocationAutocomplete",{LocationAutocomplete__poweredByGoogleImage:"LocationAutocomplete__poweredByGoogleImage--MvQCRJDK_O",LocationAutocomplete__icon:"LocationAutocomplete__icon--ZXsYRhHP4r"}).elem,ACCEPTABLE_API_STATUSES=["OK","NOT_FOUND","ZERO_RESULTS"],PLACE_TYPES=["(regions)"],LocationAutocomplete_LocationAutocomplete=function LocationAutocomplete(_a){var inputRef=_a.inputRef,_b=_a.isFocused,isFocused=void 0!==_b&&_b,onSelectionChange=_a.onSelectionChange,_c=_a.defaultInputValue,defaultInputValue=void 0===_c?"":_c,inputPlaceholder=_a.inputPlaceholder,_d=_a.clearTooltipLabel,clearTooltipLabel=void 0===_d?"":_d,noSuggestionsPlaceholder=_a.noSuggestionsPlaceholder,_e=_a.country,country=void 0===_e?"":_e,_f=_a.placeTypes,placeTypes=void 0===_f?PLACE_TYPES:_f,_g=_a.singleLocation,singleLocation=void 0!==_g&&_g,_h=_a.showCountryInSuggestions,showCountryInSuggestions=void 0!==_h&&_h,onRemoveAllLocations=_a.onRemoveAllLocations,onError=_a.onError,_j=_a.hidePoweredByGoogleLogo,hidePoweredByGoogleLogo=void 0!==_j&&_j,rest=__rest(_a,["inputRef","isFocused","onSelectionChange","defaultInputValue","inputPlaceholder","clearTooltipLabel","noSuggestionsPlaceholder","country","placeTypes","singleLocation","showCountryInSuggestions","onRemoveAllLocations","onError","hidePoweredByGoogleLogo"]),storage=react.useState({latestInputValue:""})[0],_k=react.useState([]),suggestionsList=_k[0],setSuggestionsList=_k[1],_l=react.useState(!1),isLoading=_l[0],setIsLoading=_l[1],_m=react.useState(""),inputValue=_m[0],setInputValue=_m[1],debouncedInputValue=function useDebounce(value,delay){var _useState2=_slicedToArray((0,react.useState)(value),2),debouncedValue=_useState2[0],setDebouncedValue=_useState2[1];return(0,react.useEffect)((function(){var handler=setTimeout((function(){setDebouncedValue(value)}),delay);return function(){clearTimeout(handler)}}),[value,delay]),debouncedValue}(inputValue,350),resetSuggestionsList=function resetSuggestionsList(){return setSuggestionsList([])},suggestionToString=function suggestionToString(suggestion){return suggestion?suggestion.description:""};if(react.useEffect((function(){debouncedInputValue?(storage.latestInputValue=debouncedInputValue,(new window.google.maps.places.AutocompleteService).getPlacePredictions({input:debouncedInputValue,types:placeTypes,componentRestrictions:{country:country}},(function(predictions,status){debouncedInputValue===storage.latestInputValue&&(ACCEPTABLE_API_STATUSES.includes(status)&&predictions?setSuggestionsList(predictions):(resetSuggestionsList(),onError&&onError(status)),setIsLoading(!1))}))):resetSuggestionsList()}),[country,debouncedInputValue,onError,placeTypes,storage.latestInputValue]),!(window.google&&window.google.maps&&window.google.maps.places)){return console.error("Google Maps Places API was not found on the page. Before using this component, make sure to load the places API"),react.createElement(Text.E,{context:"critical",inline:!0},"Error while rendering LocationAutocomplete")}return react.createElement(Autosuggest.G,__assign({},rest,{suggestions:suggestionsList,onSelectionAdd:function handleSelection(value){resetSuggestionsList(),setInputValue(singleLocation?value:""),onSelectionChange(value)},suggestionToString:suggestionToString,isLoading:isLoading,isFocused:isFocused,initInputValue:defaultInputValue,inputPlaceholder:inputPlaceholder,showClearButton:singleLocation,clearTitle:clearTooltipLabel,noSuggestionsPlaceholder:noSuggestionsPlaceholder,onInputValueChange:function handleInputValueChange(value){setInputValue(value),value?setIsLoading(!0):(setIsLoading(!1),resetSuggestionsList(),singleLocation&&(null==onRemoveAllLocations||onRemoveAllLocations()))},onClearAllSelected:onRemoveAllLocations,iconNode:react.createElement(index_esm.vq8,__assign({},elem("icon"))),onBlur:resetSuggestionsList,customListRender:function renderListPoweredByGoogle(_a){var listInputValue=_a.listInputValue,getItemProps=_a.getItemProps,highlightedIndex=_a.highlightedIndex,elems=null==suggestionsList?void 0:suggestionsList.map((function(item,index){return react.createElement(ListItem.c,__assign({key:suggestionToString(item)},getItemProps({item:item,index:index,isHighlighted:highlightedIndex===index})),react.createElement(MarkedText.K,{marker:listInputValue,inline:!0},showCountryInSuggestions?suggestionToString(item):item.structured_formatting.main_text))}));return hidePoweredByGoogleLogo||elems.unshift(react.createElement("img",__assign({key:"powered by google logo"},elem("poweredByGoogleImage"),{src:powered_by_google_on_white_namespaceObject,srcSet:"".concat(powered_by_google_on_white_namespaceObject,", ").concat(powered_by_google_on_white_2x_namespaceObject," 2x, ").concat(powered_by_google_on_white_3x_namespaceObject," 3x"),alt:"Powered by Google","data-list-exception":!0}))),elems},inputRef:inputRef,clearInputAfterSelection:!1}))};LocationAutocomplete_LocationAutocomplete.displayName="LocationAutocomplete";try{LocationAutocomplete_LocationAutocomplete.displayName="LocationAutocomplete",LocationAutocomplete_LocationAutocomplete.__docgenInfo={description:"## Note about props\n`LocationAutocompleteWithGoogleLoader` is a wrapper around the `LocationAutocomplete` component,\nand it makes sure the Google API is loaded on the page.\n\nYou don't need to use `LocationAutocomplete` directly.\n`LocationAutocompleteWithGoogleLoader` __will pass props__ that are not needed for loading the API\n__to `LocationAutocomplete`__, so you can provide them all together. For list of props see below",displayName:"LocationAutocomplete",props:{inputRef:{defaultValue:null,description:"input field ref",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement>"}},inputPlaceholder:{defaultValue:null,description:"to be shown in the input field when no value is typed",name:"inputPlaceholder",required:!0,type:{name:"string"}},defaultInputValue:{defaultValue:{value:""},description:"default input value",name:"defaultInputValue",required:!1,type:{name:"string"}},noSuggestionsPlaceholder:{defaultValue:null,description:"to be shown when no suggestions are available",name:"noSuggestionsPlaceholder",required:!0,type:{name:"string"}},isFocused:{defaultValue:{value:"false"},description:"trigger of the initial focus of the input field",name:"isFocused",required:!1,type:{name:"boolean"}},clearTooltipLabel:{defaultValue:{value:""},description:"label for the Clear button",name:"clearTooltipLabel",required:!1,type:{name:"string"}},singleLocation:{defaultValue:{value:"false"},description:"defines if there's a single location to select in component",name:"singleLocation",required:!1,type:{name:"boolean"}},onSelectionChange:{defaultValue:null,description:"callback to be called with selected value.",name:"onSelectionChange",required:!0,type:{name:"(value: AutocompletePrediction) => void"}},country:{defaultValue:{value:""},description:"restrict predictions to country/countries.\nFor details see: https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#ComponentRestrictions",name:"country",required:!1,type:{name:"string | string[]"}},placeTypes:{defaultValue:{value:"['(regions)']"},description:"type of locations that should be searched for.\nFor details see: https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#AutocompletionRequest.types",name:"placeTypes",required:!1,type:{name:"string[]"}},showCountryInSuggestions:{defaultValue:{value:"false"},description:"show state and country in suggestions list",name:"showCountryInSuggestions",required:!1,type:{name:"boolean"}},onRemoveAllLocations:{defaultValue:null,description:"function to remove all locations",name:"onRemoveAllLocations",required:!1,type:{name:"(() => void)"}},onError:{defaultValue:null,description:"function to be executed if error occurs while fetching suggestions",name:"onError",required:!1,type:{name:"((error: PlacesServiceStatus) => void)"}},hidePoweredByGoogleLogo:{defaultValue:{value:"false"},description:"To hide powered by google logo. For legal reasons only set it to true if Google map is displayed on the same screen as this component!",name:"hidePoweredByGoogleLogo",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"a class to be applied to the top level div",name:"className",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"HTML id for the input element",name:"id",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"onFocus() is called when the component is focused",name:"onFocus",required:!1,type:{name:"(() => void)"}},onBlur:{defaultValue:null,description:"onBlur() is called when the component is blurred",name:"onBlur",required:!1,type:{name:"(() => void)"}},onSubmit:{defaultValue:null,description:"Function to be called on submitting form",name:"onSubmit",required:!1,type:{name:"(() => void)"}},disabled:{defaultValue:null,description:"defines if the component is disabled",name:"disabled",required:!1,type:{name:"boolean"}},showClearButton:{defaultValue:null,description:"show Clear button on hover even if there are no selectedSuggestions passed",name:"showClearButton",required:!1,type:{name:"boolean"}},isLoading:{defaultValue:null,description:"If suggestions are still loading, i.e. display placeholders",name:"isLoading",required:!1,type:{name:"boolean"}},clearInputAfterSelection:{defaultValue:null,description:"",name:"clearInputAfterSelection",required:!1,type:{name:"boolean"}},onInputValueChange:{defaultValue:null,description:"onInputValueChange(inputValue) called when the input values is changed. Can be used to implement the component as controlled component",name:"onInputValueChange",required:!1,type:{name:"((value: string) => void)"}},initInputValue:{defaultValue:null,description:"Initial input value should be shown if input gets focused",name:"initInputValue",required:!1,type:{name:"string"}},suggestionToKey:{defaultValue:null,description:"Creates a unique (React) key for a suggestion item. If undefined suggestionToString will be used",name:"suggestionToKey",required:!1,type:{name:"((suggestions: AutocompletePrediction) => string)"}},selectedSuggestions:{defaultValue:null,description:"An array of already selected suggestions",name:"selectedSuggestions",required:!1,type:{name:"AutocompletePrediction[]"}},numberOfVisibleTags:{defaultValue:null,description:"Number of visible tags in blur mode",name:"numberOfVisibleTags",required:!1,type:{name:"number"}},allowMixingSuggestionsAndLoading:{defaultValue:null,description:"Defines if suggestions list is visible even while loading other elements",name:"allowMixingSuggestionsAndLoading",required:!1,type:{name:"boolean"}},useOptimizeListRender:{defaultValue:null,description:"Enable ListOptimizer component for decreasing render time",name:"useOptimizeListRender",required:!1,type:{name:"boolean"}},onSelectionRemove:{defaultValue:null,description:"Function to be called when a suggestion is removed",name:"onSelectionRemove",required:!1,type:{name:"((item: AutocompletePrediction) => void)"}},customSelectionIndicator:{defaultValue:null,description:"Means to overwrite the look and feel of the UI in its blurred state.\nIt should be null or undefined if there is no selection yet",name:"customSelectionIndicator",required:!1,type:{name:"ReactNode"}},inputAttrs:{defaultValue:null,description:"Additional HTML attributes to be applied to the input element",name:"inputAttrs",required:!1,type:{name:"DictionaryOf<string | boolean>"}},iconNode:{defaultValue:null,description:"icon which should render",name:"iconNode",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},customListRender:{defaultValue:null,description:"render custom list values",name:"customListRender",required:!1,type:{name:"((suggestions: any) => ReactNode)"}},shouldRenderWithPortal:{defaultValue:null,description:"determines if the suggestion list should be rendered using a React Portal\nto the dropdown needs to bypass parent element clipping, overflow, or z-index issues.",name:"shouldRenderWithPortal",required:!1,type:{name:"boolean"}},suggestionItemRenderer:{defaultValue:null,description:"render function for suggestion list item. If undefined, suggestionToString will be used.",name:"suggestionItemRenderer",required:!1,type:{name:"((suggestions: AutocompletePrediction | null, index: number, array: AutocompletePrediction[]) => ReactNode)"}},rootRef:{defaultValue:null,description:"root wrapper ref",name:"rootRef",required:!1,type:{name:"RefObject<HTMLDivElement>"}},listRef:{defaultValue:null,description:"suggestions list ref",name:"listRef",required:!1,type:{name:"RefObject<HTMLUListElement>"}},onOuterClick:{defaultValue:null,description:"a callback to be called when outer click happens",name:"onOuterClick",required:!1,type:{name:"(() => void)"}},clearTitle:{defaultValue:null,description:"to be shown as clear button title",name:"clearTitle",required:!1,type:{name:"ReactNode"}},onClearAllSelected:{defaultValue:null,description:"function to be called if FieldWrapper clear button is clicked",name:"onClearAllSelected",required:!1,type:{name:"(() => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/LocationAutocomplete/LocationAutocomplete.tsx#LocationAutocomplete"]={docgenInfo:LocationAutocomplete_LocationAutocomplete.__docgenInfo,name:"LocationAutocomplete",path:"src/components/LocationAutocomplete/LocationAutocomplete.tsx#LocationAutocomplete"})}catch(__react_docgen_typescript_loader_error){}},"./src/components/SelectComponents/Autosuggest/Autosuggest.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{G:function(){return Autosuggest_Autosuggest}});var react=__webpack_require__("./node_modules/react/index.js"),bem=__webpack_require__("./src/utils/bem/bem.js"),index_esm=__webpack_require__("./node_modules/react-icons/md/index.esm.js"),__assign=function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)},__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t},_a=(0,bem.T)("SuggestionTag",{SuggestionTag:"SuggestionTag--ufmHPnV5Tr","SuggestionTag--block":"SuggestionTag--block--YsX7_sAi4J","SuggestionTag--small":"SuggestionTag--small--FSmbOAcjML",SuggestionTag__label:"SuggestionTag__label--qhqICxiWRV",SuggestionTag__button:"SuggestionTag__button--WQlUGFOXBh"}),block=_a.block,elem=_a.elem,SuggestionTag_SuggestionTag=function SuggestionTag(_a){var _b,_c=_a.width,width=void 0===_c?"auto":_c,children=_a.children,onClick=_a.onClick,rest=__rest(_a,["width","children","onClick"]);return"number"==typeof children||children?react.createElement("div",__assign({},rest,block(((_b={})[width||"auto"]=!0,_b))),react.createElement("div",__assign({title:children},elem("label")),children),onClick?react.createElement("button",__assign({onClick:onClick,type:"button"},elem("button")),react.createElement(index_esm.m6K,null)):null):null};SuggestionTag_SuggestionTag.displayName="SuggestionTag";try{SuggestionTag_SuggestionTag.displayName="SuggestionTag",SuggestionTag_SuggestionTag.__docgenInfo={description:"",displayName:"SuggestionTag",props:{width:{defaultValue:{value:"auto"},description:"Defines with behavior for tag",name:"width",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"auto"'},{value:'"block"'}]}},onClick:{defaultValue:null,description:"Clicked on delete button",name:"onClick",required:!1,type:{name:"((e: MouseEvent<Element, MouseEvent>) => void)"}},children:{defaultValue:null,description:"Tag content",name:"children",required:!1,type:{name:"ReactNode"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/SelectComponents/Autosuggest/SuggestionTag/SuggestionTag.tsx#SuggestionTag"]={docgenInfo:SuggestionTag_SuggestionTag.__docgenInfo,name:"SuggestionTag",path:"src/components/SelectComponents/Autosuggest/SuggestionTag/SuggestionTag.tsx#SuggestionTag"})}catch(__react_docgen_typescript_loader_error){}var SuggestionsList=__webpack_require__("./src/components/SelectComponents/SuggestionsList/SuggestionsList.tsx"),SelectBase=__webpack_require__("./src/components/SelectComponents/SelectBase/SelectBase.tsx"),keyboard=__webpack_require__("./src/constants/keyboard.ts"),Autosuggest_assign=function(){return Autosuggest_assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},Autosuggest_assign.apply(this,arguments)},Autosuggest_rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t},__spreadArray=function(to,from,pack){if(pack||2===arguments.length)for(var ar,i=0,l=from.length;i<l;i++)!ar&&i in from||(ar||(ar=Array.prototype.slice.call(from,0,i)),ar[i]=from[i]);return to.concat(ar||Array.prototype.slice.call(from))},Autosuggest_elem=(0,bem.T)("Autosuggest",{Autosuggest__wrapper:"Autosuggest__wrapper--AvOKnU1hRi","Autosuggest__wrapper--isFocused":"Autosuggest__wrapper--isFocused--RWiKgjM4i1",Autosuggest__input:"Autosuggest__input--TPLYI76DkA","Autosuggest__input--hidden":"Autosuggest__input--hidden--WGh2OaY30T"}).elem;function Autosuggest_Autosuggest(_a){var _b=_a.id,id=void 0===_b?void 0:_b,onInputValueChange=_a.onInputValueChange,onSelectionAdd=_a.onSelectionAdd,_c=_a.selectedSuggestions,selectedSuggestions=void 0===_c?[]:_c,suggestionToString=_a.suggestionToString,suggestionToKey=_a.suggestionToKey,suggestionItemRenderer=_a.suggestionItemRenderer,inputPlaceholder=_a.inputPlaceholder,_d=_a.noSuggestionsPlaceholder,noSuggestionsPlaceholder=void 0===_d?"":_d,_e=_a.useOptimizeListRender,useOptimizeListRender=void 0!==_e&&_e,suggestions=_a.suggestions,_f=_a.isLoading,isLoading=void 0!==_f&&_f,_g=_a.numberOfVisibleTags,numberOfVisibleTags=void 0===_g?3:_g,_h=_a.allowMixingSuggestionsAndLoading,allowMixingSuggestionsAndLoading=void 0!==_h&&_h,onFocus=_a.onFocus,onBlur=_a.onBlur,_j=_a.onSubmit,onSubmit=void 0===_j?function(){return null}:_j,showClearButton=_a.showClearButton,_k=_a.onSelectionRemove,onSelectionRemove=void 0===_k?function(){return null}:_k,inputRefFromProps=_a.inputRef,_l=_a.customSelectionIndicator,customSelectionIndicator=void 0===_l?void 0:_l,initInputValue=_a.initInputValue,_m=_a.inputAttrs,inputAttrs=void 0===_m?{}:_m,isFocused=_a.isFocused,iconNode=_a.iconNode,customListRender=_a.customListRender,_o=_a.clearInputAfterSelection,clearInputAfterSelection=void 0===_o||_o,_p=_a.shouldRenderWithPortal,shouldRenderWithPortal=void 0!==_p&&_p,rest=Autosuggest_rest(_a,["id","onInputValueChange","onSelectionAdd","selectedSuggestions","suggestionToString","suggestionToKey","suggestionItemRenderer","inputPlaceholder","noSuggestionsPlaceholder","useOptimizeListRender","suggestions","isLoading","numberOfVisibleTags","allowMixingSuggestionsAndLoading","onFocus","onBlur","onSubmit","showClearButton","onSelectionRemove","inputRef","customSelectionIndicator","initInputValue","inputAttrs","isFocused","iconNode","customListRender","clearInputAfterSelection","shouldRenderWithPortal"]),inputRef=inputRefFromProps||react.createRef(),_q=react.useState(""),inputValue=_q[0],setInputValue=_q[1],renderIcon=function renderIcon(){return iconNode&&react.cloneElement(iconNode,Autosuggest_elem("spacedElem",{elemClassName:iconNode.props.className}))},isClearButtonShown=customSelectionIndicator?showClearButton:showClearButton&&selectedSuggestions.length>0;return react.createElement(SelectBase.o,Autosuggest_assign({},rest,{suggestions:suggestions,suggestionToString:suggestionToString,inputRef:inputRef,onFocus:onFocus,onBlur:onBlur,onSelectionAdd:onSelectionAdd,onInputValueChange:function handleInputValueChange(value){null==onInputValueChange||onInputValueChange(value),setInputValue(value)},listRenderer:function renderList(listProps){return void 0!==customListRender&&!isLoading&&inputValue?customListRender(Autosuggest_assign({},listProps)):suggestions&&suggestions.length>0||inputValue?react.createElement(SuggestionsList.S,Autosuggest_assign({},listProps,{allowMixingSuggestionsAndLoading:allowMixingSuggestionsAndLoading,isLoading:isLoading,useOptimizeRender:useOptimizeListRender,suggestionToKey:suggestionToKey,suggestionItemRenderer:suggestionItemRenderer,noSuggestionsPlaceholder:noSuggestionsPlaceholder,passDisabledToListItems:!0})):null},focusedRenderer:function renderFocused(_a){var getInputProps=_a.getInputProps,onFocusInput=_a.onFocus,highlightedIndex=_a.highlightedIndex;return react.createElement("div",Autosuggest_assign({},Autosuggest_elem("wrapper",{isFocused:!0})),renderIcon(),function renderFullTagsList(){return selectedSuggestions.map((function(item){return react.createElement(SuggestionTag_SuggestionTag,{key:suggestionToString(item),onClick:function onClick(){return null==onSelectionRemove?void 0:onSelectionRemove(item)}},suggestionToString(item))}))}(),react.createElement("input",Autosuggest_assign({},getInputProps(Autosuggest_assign(Autosuggest_assign(Autosuggest_assign({},inputAttrs),{id:id,ref:inputRef,placeholder:inputPlaceholder,onFocus:onFocusInput,onKeyDown:function onKeyDown(e){return function handleInputKeyDown(event,highlightedIndex){var _a,isHighlighted=null!==highlightedIndex&&highlightedIndex>-1;if(event.key!==keyboard.jD||inputValue||isHighlighted){if(event.key===keyboard.aH)null===(_a=inputRef.current)||void 0===_a||_a.blur();else if(event.key===keyboard.oJ&&!inputValue&&selectedSuggestions.length){var lastItem=selectedSuggestions[selectedSuggestions.length-1];null==onSelectionRemove||onSelectionRemove(lastItem)}}else event.nativeEvent.preventDownshiftDefault=!0,null==onSubmit||onSubmit()}(e,highlightedIndex)},"data-lpignore":!0}),Autosuggest_elem("input"))))))},blurredRenderer:function renderBlurred(_a){var getInputProps=_a.getInputProps,onFocusInput=_a.onFocus,selectionIndicator=customSelectionIndicator||function renderShortTagsList(){var visibleTags=selectedSuggestions.slice(0,numberOfVisibleTags),numberOfHiddenTags=selectedSuggestions.slice(numberOfVisibleTags).length,visibleTagsList=visibleTags.map((function(item){return react.createElement(SuggestionTag_SuggestionTag,{key:suggestionToString(item),width:numberOfHiddenTags>0?"block":"auto"},suggestionToString(item))}));if(numberOfHiddenTags>0){var counter=react.createElement(SuggestionTag_SuggestionTag,{key:"counter",width:"small"},"+".concat(numberOfHiddenTags));return __spreadArray(__spreadArray([],visibleTagsList,!0),[counter],!1)}return visibleTagsList}(),placeholder=0===selectedSuggestions.length?inputPlaceholder:"",isHidden=!!customSelectionIndicator||selectedSuggestions.length>0;return react.createElement("div",Autosuggest_assign({},Autosuggest_elem("wrapper")),renderIcon(),selectionIndicator,react.createElement("input",Autosuggest_assign({},getInputProps(Autosuggest_assign(Autosuggest_assign(Autosuggest_assign({},inputAttrs),{id:id,ref:inputRef,placeholder:placeholder,"data-lpignore":!0,onFocus:onFocusInput}),Autosuggest_elem("input",{hidden:isHidden}))))))},showClearButton:isClearButtonShown,highlightOnEmptyInput:!1,keepExpandedAfterSelection:!0,initInputValue:initInputValue,clearInputAfterSelection:clearInputAfterSelection,autoFocus:isFocused,shouldRenderWithPortal:shouldRenderWithPortal}))}Autosuggest_Autosuggest.displayName="Autosuggest";try{Autosuggest_Autosuggest.displayName="Autosuggest",Autosuggest_Autosuggest.__docgenInfo={description:"The Autosuggest component is recommended to use for a dynamic list of values.\nIt is geared toward a multi-select use-case, but you can use it in single select mode too\nor even a combination of the two. See related story for details.\nThe list of suggestions is shown once there's a value inside the input.\n\nMore detailed face-to-face comparison of Select components can be found\n[here](https://docs.google.com/spreadsheets/d/1VyYR54RpNaPWLBXOoBPkFEkmzLS_LfEEGdm1ZTTOcHU/edit#gid=0)`,",displayName:"Autosuggest",props:{id:{defaultValue:{value:"undefined"},description:"HTML id for the input element",name:"id",required:!1,type:{name:"string"}},suggestionToKey:{defaultValue:null,description:"Creates a unique (React) key for a suggestion item. If undefined suggestionToString will be used",name:"suggestionToKey",required:!1,type:{name:"((suggestions: S) => string)"}},selectedSuggestions:{defaultValue:{value:"[]"},description:"An array of already selected suggestions",name:"selectedSuggestions",required:!1,type:{name:"S[]"}},numberOfVisibleTags:{defaultValue:{value:"3"},description:"Number of visible tags in blur mode",name:"numberOfVisibleTags",required:!1,type:{name:"number"}},inputPlaceholder:{defaultValue:null,description:"String to be shown in the input field when no value is typed",name:"inputPlaceholder",required:!0,type:{name:"string"}},noSuggestionsPlaceholder:{defaultValue:{value:""},description:"String to be shown when no suggestions are available",name:"noSuggestionsPlaceholder",required:!1,type:{name:"string"}},allowMixingSuggestionsAndLoading:{defaultValue:{value:"false"},description:"Defines if suggestions list is visible even while loading other elements",name:"allowMixingSuggestionsAndLoading",required:!1,type:{name:"boolean"}},useOptimizeListRender:{defaultValue:{value:"false"},description:"Enable ListOptimizer component for decreasing render time",name:"useOptimizeListRender",required:!1,type:{name:"boolean"}},onSelectionRemove:{defaultValue:{value:"() => null"},description:"Function to be called when a suggestion is removed",name:"onSelectionRemove",required:!1,type:{name:"((item: S) => void)"}},onSubmit:{defaultValue:{value:"() => null"},description:"Function to be called on submitting form",name:"onSubmit",required:!1,type:{name:"(() => void)"}},isLoading:{defaultValue:{value:"false"},description:"If suggestions are still loading, i.e. display placeholders",name:"isLoading",required:!1,type:{name:"boolean"}},customSelectionIndicator:{defaultValue:{value:"undefined"},description:"Means to overwrite the look and feel of the UI in its blurred state.\nIt should be null or undefined if there is no selection yet",name:"customSelectionIndicator",required:!1,type:{name:"ReactNode"}},inputAttrs:{defaultValue:{value:"{}"},description:"Additional HTML attributes to be applied to the input element",name:"inputAttrs",required:!1,type:{name:"DictionaryOf<string | boolean>"}},isFocused:{defaultValue:null,description:"trigger of the initial focus of the input field",name:"isFocused",required:!1,type:{name:"boolean"}},iconNode:{defaultValue:null,description:"icon which should render",name:"iconNode",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},customListRender:{defaultValue:null,description:"render custom list values",name:"customListRender",required:!1,type:{name:"((suggestions: any) => ReactNode)"}},clearInputAfterSelection:{defaultValue:{value:"true"},description:"",name:"clearInputAfterSelection",required:!1,type:{name:"boolean"}},shouldRenderWithPortal:{defaultValue:{value:"false"},description:"determines if the suggestion list should be rendered using a React Portal\nto the dropdown needs to bypass parent element clipping, overflow, or z-index issues.",name:"shouldRenderWithPortal",required:!1,type:{name:"boolean"}},suggestions:{defaultValue:null,description:'an array of objects or strings that will be used to render the suggestions list.\nif you want to disabled some of the items, this props needs to be an array of objects,\nwhere the object has a property "disabled" set true as needed.',name:"suggestions",required:!0,type:{name:"S[]"}},suggestionToString:{defaultValue:null,description:"suggestionToString(suggestion) should return a string to be displayed in the UI. e.g.: suggestion => suggestion.name",name:"suggestionToString",required:!0,type:{name:"(suggestions?: S | null | undefined) => string"}},suggestionItemRenderer:{defaultValue:null,description:"render function for suggestion list item. If undefined, suggestionToString will be used.",name:"suggestionItemRenderer",required:!1,type:{name:"((suggestions: S | null, index: number, array: S[]) => ReactNode)"}},rootRef:{defaultValue:null,description:"root wrapper ref",name:"rootRef",required:!1,type:{name:"RefObject<HTMLDivElement>"}},listRef:{defaultValue:null,description:"suggestions list ref",name:"listRef",required:!1,type:{name:"RefObject<HTMLUListElement>"}},disabled:{defaultValue:null,description:"defines if the component is disabled",name:"disabled",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"a class to be applied to the top level div",name:"className",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"onFocus() is called when the component is focused",name:"onFocus",required:!1,type:{name:"(() => void)"}},onBlur:{defaultValue:null,description:"onBlur() is called when the component is blurred",name:"onBlur",required:!1,type:{name:"(() => void)"}},onSelectionAdd:{defaultValue:null,description:"onSelectionAdd() called when a suggestion is selected",name:"onSelectionAdd",required:!0,type:{name:"(item: S) => void"}},onOuterClick:{defaultValue:null,description:"a callback to be called when outer click happens",name:"onOuterClick",required:!1,type:{name:"(() => void)"}},clearTitle:{defaultValue:null,description:"to be shown as clear button title",name:"clearTitle",required:!1,type:{name:"ReactNode"}},onClearAllSelected:{defaultValue:null,description:"function to be called if FieldWrapper clear button is clicked",name:"onClearAllSelected",required:!1,type:{name:"(() => void)"}},showClearButton:{defaultValue:null,description:"show Clear button on hover even if there are no selectedSuggestions passed",name:"showClearButton",required:!1,type:{name:"boolean"}},inputRef:{defaultValue:null,description:"input field ref",name:"inputRef",required:!1,type:{name:"RefObject<HTMLElement>"}},onInputValueChange:{defaultValue:null,description:"onInputValueChange(inputValue) called when the input values is changed. Can be used to implement the component as controlled component",name:"onInputValueChange",required:!1,type:{name:"((value: string) => void)"}},initInputValue:{defaultValue:null,description:"Initial input value should be shown if input gets focused",name:"initInputValue",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/SelectComponents/Autosuggest/Autosuggest.tsx#Autosuggest"]={docgenInfo:Autosuggest_Autosuggest.__docgenInfo,name:"Autosuggest",path:"src/components/SelectComponents/Autosuggest/Autosuggest.tsx#Autosuggest"})}catch(__react_docgen_typescript_loader_error){}}}]);