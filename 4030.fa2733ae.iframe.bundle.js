"use strict";(self.webpackChunk_textkernel_oneui=self.webpackChunk_textkernel_oneui||[]).push([[4030],{"./stories/organisms/Combobox.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Clearable:function(){return Clearable},FreeInput:function(){return FreeInput},_Combobox:function(){return _Combobox},__namedExportsOrder:function(){return __namedExportsOrder},default:function(){return Combobox_stories}});var react=__webpack_require__("./node_modules/react/index.js"),bem=__webpack_require__("./src/utils/bem/bem.js"),SelectBase=__webpack_require__("./src/components/SelectComponents/SelectBase/SelectBase.tsx"),Text=__webpack_require__("./src/components/Text/Text.tsx"),SuggestionsList=__webpack_require__("./src/components/SelectComponents/SuggestionsList/SuggestionsList.tsx"),keyboard=__webpack_require__("./src/constants/keyboard.ts"),__assign=function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)},__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t},elem=(0,bem.T)("Combobox",{Combobox__wrapper:"Combobox__wrapper--PK_rHaJTLE","Combobox__wrapper--focused":"Combobox__wrapper--focused--CFZ2_zYTB8","Combobox__wrapper--disabled":"Combobox__wrapper--disabled--_jglUEySHu",Combobox__input:"Combobox__input--Mg2XG9qfCo",Combobox__selection:"Combobox__selection--z986GgjmU1","Combobox__input--disabled":"Combobox__input--disabled--sTFwQjkVq0","Combobox__selection--disabled":"Combobox__selection--disabled--rZgggert5Z"}).elem;function Combobox_Combobox(_a){var id=_a.id,onSelectionAdd=_a.onSelectionAdd,inputRefFromProps=_a.inputRef,suggestions=_a.suggestions,suggestionToString=_a.suggestionToString,suggestionItemRenderer=_a.suggestionItemRenderer,noSuggestionsPlaceholder=_a.noSuggestionsPlaceholder,onBlur=_a.onBlur,onInputValueChange=_a.onInputValueChange,onOuterClick=_a.onOuterClick,disabled=_a.disabled,inputPlaceholder=_a.inputPlaceholder,_b=_a.inputAttrs,inputAttrs=void 0===_b?{}:_b,selectedSuggestion=_a.selectedSuggestion,upArrowLabel=_a.upArrowLabel,downArrowLabel=_a.downArrowLabel,useOptimizeListRender=_a.useOptimizeListRender,_c=_a.shouldRenderWithPortal,shouldRenderWithPortal=void 0!==_c&&_c,rest=__rest(_a,["id","onSelectionAdd","inputRef","suggestions","suggestionToString","suggestionItemRenderer","noSuggestionsPlaceholder","onBlur","onInputValueChange","onOuterClick","disabled","inputPlaceholder","inputAttrs","selectedSuggestion","upArrowLabel","downArrowLabel","useOptimizeListRender","shouldRenderWithPortal"]),inputRef=inputRefFromProps||react.createRef();return react.createElement(SelectBase.o,__assign({},rest,{suggestions:suggestions,suggestionToString:suggestionToString,disabled:disabled,inputRef:inputRef,onBlur:onBlur,onSelectionAdd:onSelectionAdd,onInputValueChange:onInputValueChange,onOuterClick:onOuterClick,listRenderer:function listRenderer(listProps){return react.createElement(SuggestionsList.S,__assign({},listProps,{isLoading:!1,noSuggestionsPlaceholder:noSuggestionsPlaceholder,suggestionItemRenderer:suggestionItemRenderer,useOptimizeRender:useOptimizeListRender,passDisabledToListItems:!0}))},focusedRenderer:function renderFocused(_a){var getInputProps=_a.getInputProps;return react.createElement("div",__assign({tabIndex:0,role:"searchbox"},elem("wrapper",{disabled:disabled})),react.createElement("input",__assign({},getInputProps(__assign(__assign(__assign({},inputAttrs),{id:id,disabled:disabled,ref:inputRef,placeholder:suggestionToString(selectedSuggestion)||inputPlaceholder,onKeyDown:function handleInputKeyDown(event){var _a;event.key===keyboard.aH&&(null===(_a=inputRef.current)||void 0===_a||_a.blur())},"data-lpignore":!0}),elem("input",{disabled:disabled}))))))},blurredRenderer:function renderBlurred(_a){var getInputProps=_a.getInputProps;return react.createElement("div",__assign({tabIndex:0,role:"searchbox"},getInputProps(),elem("wrapper",{disabled:disabled})),react.createElement("span",__assign({},elem("selection")),selectedSuggestion?suggestionToString(selectedSuggestion):react.createElement(Text.E,__assign({inline:!0},elem("placeholder"),{context:"neutral"}),inputPlaceholder)))},showArrow:!0,downArrowLabel:downArrowLabel,upArrowLabel:upArrowLabel,shouldRenderWithPortal:shouldRenderWithPortal}))}Combobox_Combobox.displayName="Combobox";try{Combobox_Combobox.displayName="Combobox",Combobox_Combobox.__docgenInfo={description:"## Usage information\nThis component is recommended to use when there's a static known list of values.\nThe user can filter the list through the input field. The list is shown right away\nby clicking on the control. The selected option is shown in the component itself.\n\nMore detailed face-to-face comparison of Select components can be found\n[here](https://docs.google.com/spreadsheets/d/1VyYR54RpNaPWLBXOoBPkFEkmzLS_LfEEGdm1ZTTOcHU/edit#gid=0)",displayName:"Combobox",props:{selectedSuggestion:{defaultValue:null,description:"The item that is currently selected, will be used as placeholder in the input field",name:"selectedSuggestion",required:!1,type:{name:"S"}},inputPlaceholder:{defaultValue:null,description:"to be shown in the input field when no value is typed or selected",name:"inputPlaceholder",required:!0,type:{name:"string"}},noSuggestionsPlaceholder:{defaultValue:null,description:"to be shown when no suggestions are available",name:"noSuggestionsPlaceholder",required:!0,type:{name:"string"}},inputAttrs:{defaultValue:{value:"{}"},description:"Additional HTML attributes to be applied to the input element",name:"inputAttrs",required:!1,type:{name:"DictionaryOf<string | boolean>"}},downArrowLabel:{defaultValue:null,description:"Down arrow name for ARIA labelling, it is used when the component isn't focused",name:"downArrowLabel",required:!1,type:{name:"string"}},upArrowLabel:{defaultValue:null,description:"Up arrow name for ARIA labelling, it is used when the component is focused and options are shown",name:"upArrowLabel",required:!1,type:{name:"string"}},useOptimizeListRender:{defaultValue:null,description:"enable ListOptimizer component for decreasing render time",name:"useOptimizeListRender",required:!1,type:{name:"boolean"}},shouldRenderWithPortal:{defaultValue:{value:"false"},description:"determines if the suggestion list should be rendered using a React Portal\nto the dropdown needs to bypass parent element clipping, overflow, or z-index issues.",name:"shouldRenderWithPortal",required:!1,type:{name:"boolean"}},suggestions:{defaultValue:null,description:'an array of objects or strings that will be used to render the suggestions list.\nif you want to disabled some of the items, this props needs to be an array of objects,\nwhere the object has a property "disabled" set true as needed.',name:"suggestions",required:!0,type:{name:"S[]"}},suggestionToString:{defaultValue:null,description:"suggestionToString(suggestion) should return a string to be displayed in the UI. e.g.: suggestion => suggestion.name",name:"suggestionToString",required:!0,type:{name:"(suggestions?: S | null | undefined) => string"}},suggestionItemRenderer:{defaultValue:null,description:"render function for suggestion list item. If undefined, suggestionToString will be used.",name:"suggestionItemRenderer",required:!1,type:{name:"((suggestions: S | null, index: number, array: S[]) => ReactNode)"}},rootRef:{defaultValue:null,description:"root wrapper ref",name:"rootRef",required:!1,type:{name:"RefObject<HTMLDivElement>"}},listRef:{defaultValue:null,description:"suggestions list ref",name:"listRef",required:!1,type:{name:"RefObject<HTMLUListElement>"}},disabled:{defaultValue:null,description:"defines if the component is disabled",name:"disabled",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"a class to be applied to the top level div",name:"className",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"onFocus() is called when the component is focused",name:"onFocus",required:!1,type:{name:"(() => void)"}},onBlur:{defaultValue:null,description:"onBlur() is called when the component is blurred",name:"onBlur",required:!1,type:{name:"(() => void)"}},onSelectionAdd:{defaultValue:null,description:"onSelectionAdd() called when a suggestion is selected",name:"onSelectionAdd",required:!0,type:{name:"(item: S) => void"}},onOuterClick:{defaultValue:null,description:"a callback to be called when outer click happens",name:"onOuterClick",required:!1,type:{name:"(() => void)"}},clearTitle:{defaultValue:null,description:"to be shown as clear button title",name:"clearTitle",required:!1,type:{name:"ReactNode"}},onClearAllSelected:{defaultValue:null,description:"function to be called if FieldWrapper clear button is clicked",name:"onClearAllSelected",required:!1,type:{name:"(() => void)"}},showClearButton:{defaultValue:null,description:"show Clear button on hover even if there are no selectedSuggestions passed",name:"showClearButton",required:!1,type:{name:"boolean"}},inputRef:{defaultValue:null,description:"input field ref",name:"inputRef",required:!1,type:{name:"RefObject<HTMLElement>"}},onInputValueChange:{defaultValue:null,description:"onInputValueChange(inputValue) called when the input values is changed. Can be used to implement the component as controlled component",name:"onInputValueChange",required:!1,type:{name:"((value: string) => void)"}},clearInputAfterSelection:{defaultValue:null,description:"clean up input value after selected item",name:"clearInputAfterSelection",required:!1,type:{name:"boolean"}},initInputValue:{defaultValue:null,description:"Initial input value should be shown if input gets focused",name:"initInputValue",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/SelectComponents/Combobox/Combobox.tsx#Combobox"]={docgenInfo:Combobox_Combobox.__docgenInfo,name:"Combobox",path:"src/components/SelectComponents/Combobox/Combobox.tsx#Combobox"})}catch(__react_docgen_typescript_loader_error){}var suggestions=__webpack_require__("./src/components/SelectComponents/Autosuggest/__mocks__/suggestions.ts"),Combobox_stories_assign=function(){return Combobox_stories_assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},Combobox_stories_assign.apply(this,arguments)},__spreadArray=function(to,from,pack){if(pack||2===arguments.length)for(var ar,i=0,l=from.length;i<l;i++)!ar&&i in from||(ar||(ar=Array.prototype.slice.call(from,0,i)),ar[i]=from[i]);return to.concat(ar||Array.prototype.slice.call(from))},Combobox_stories={title:"Organisms/Select Components/Combobox",component:Combobox_Combobox},_Combobox={name:"Combobox",args:{style:{width:"650px"},useOptimizeListRender:!1,inputPlaceholder:"Select something...",noSuggestionsPlaceholder:"No suggestions found...",suggestionToString:suggestions.r5},render:function render(args){var _a=react.useState(),selectedSuggestion=_a[0],setSelectedSuggestion=_a[1],_b=react.useState(""),inputValue=_b[0],setInputValue=_b[1];return react.createElement(react.Fragment,null,react.createElement(Combobox_Combobox,Combobox_stories_assign({},args,{suggestions:function getSuggestions(){return suggestions.MK.filter((function(item){return item.name.toLocaleLowerCase().includes(inputValue.toLocaleLowerCase())}))}(),selectedSuggestion:selectedSuggestion,onFocus:function onFocus(){console.log("onFocus was called")},onBlur:function onBlur(){console.log("onBlur was called"),setTimeout((function(){return setInputValue("")}),200)},onSelectionAdd:function onSelectionAdd(item){console.log("onSelectionAdd was called with {name: ".concat(null==item?void 0:item.name,"}")),setSelectedSuggestion(item)},onInputValueChange:function onInputValueChange(value){console.log("onInputValueChange was called with ".concat(value)),setInputValue(value)},shouldRenderWithPortal:!0})))}},Clearable={name:"Clearable Combobox",args:{style:{width:"650px"},useOptimizeListRender:!1,inputPlaceholder:"Select something...",noSuggestionsPlaceholder:"No suggestions found...",suggestionToString:suggestions.r5,clearTitle:"Clear"},render:function render(args){var _a=react.useState(),selectedSuggestion=_a[0],setSelectedSuggestion=_a[1],_b=react.useState(""),inputValue=_b[0],setInputValue=_b[1];return react.createElement(react.Fragment,null,react.createElement(Combobox_Combobox,Combobox_stories_assign({},args,{suggestions:function getSuggestions(){return suggestions.MK.filter((function(item){return item.name.toLocaleLowerCase().includes(inputValue.toLocaleLowerCase())}))}(),selectedSuggestion:selectedSuggestion,onFocus:function onFocus(){console.log("onFocus was called")},onBlur:function onBlur(){console.log("onBlur was called"),setTimeout((function(){return setInputValue("")}),200)},onSelectionAdd:function onSelectionAdd(item){console.log("onSelectionAdd was called with {name: ".concat(null==item?void 0:item.name,"}")),setSelectedSuggestion(item)},onInputValueChange:function onInputValueChange(value){console.log("onInputValueChange was called with ".concat(value)),setInputValue(value)},onClearAllSelected:function onClear(){setSelectedSuggestion(void 0)},showClearButton:!!selectedSuggestion})))}},FreeInput={name:"Combobox with free input",args:{style:{width:"650px"},useOptimizeListRender:!1,inputPlaceholder:"Select something...",noSuggestionsPlaceholder:"No suggestions found...",suggestionToString:suggestions.r5,clearTitle:"Clear"},render:function render(args){var _a=react.useState(),selectedSuggestion=_a[0],setSelectedSuggestion=_a[1],_b=react.useState(""),inputValue=_b[0],setInputValue=_b[1];return react.createElement(react.Fragment,null,react.createElement(Combobox_Combobox,Combobox_stories_assign({},args,{suggestions:function getSuggestions(){var filtered=suggestions.MK.filter((function(item){return item.name.toLocaleLowerCase().includes(inputValue.toLocaleLowerCase())}));return inputValue&&!filtered.some((function(item){return item.name.toLowerCase()===inputValue.toLowerCase()}))?__spreadArray([{name:inputValue}],filtered,!0):filtered}(),selectedSuggestion:selectedSuggestion,onFocus:function onFocus(){console.log("onFocus was called")},onBlur:function onBlur(){console.log("onBlur was called"),setTimeout((function(){return setInputValue("")}),200)},onSelectionAdd:function onSelectionAdd(item){console.log("onSelectionAdd was called with {name: ".concat(null==item?void 0:item.name,"}")),setSelectedSuggestion(item),setInputValue("")},onInputValueChange:function onInputValueChange(value){console.log("onInputValueChange was called with ".concat(value)),setInputValue(value),selectedSuggestion&&setSelectedSuggestion(void 0)},onClearAllSelected:function onClear(){console.log("onClear was called"),setSelectedSuggestion(void 0)},onOuterClick:function onOuterClick(){console.log("onOuterClick was called"),inputValue&&(setSelectedSuggestion({name:inputValue}),setInputValue(""))},showClearButton:!!selectedSuggestion})))}};_Combobox.parameters={..._Combobox.parameters,docs:{..._Combobox.parameters?.docs,source:{originalSource:"{\n  name: 'Combobox',\n  args: {\n    style: {\n      width: '650px'\n    },\n    useOptimizeListRender: false,\n    inputPlaceholder: 'Select something...',\n    noSuggestionsPlaceholder: 'No suggestions found...',\n    suggestionToString: SUGGESTION_TO_STRING\n  },\n  render: args => {\n    const [selectedSuggestion, setSelectedSuggestion] = React.useState<TSuggestion | undefined>();\n    const [inputValue, setInputValue] = React.useState('');\n    const getSuggestions = (): TSuggestion[] => SUGGESTIONS.filter(item => item.name.toLocaleLowerCase().includes(inputValue.toLocaleLowerCase()));\n    const onInputValueChange = (value: string) => {\n      console.log(`onInputValueChange was called with ${value}`);\n      setInputValue(value);\n    };\n    const onSelectionAdd = (item: TSuggestion) => {\n      console.log(`onSelectionAdd was called with {name: ${item?.name}}`);\n      setSelectedSuggestion(item);\n    };\n    const onFocus = () => {\n      console.log('onFocus was called');\n    };\n    const onBlur = () => {\n      console.log('onBlur was called');\n      setTimeout(() => setInputValue(''), 200);\n    };\n    return <>\n                <Combobox<TSuggestion> {...args} suggestions={getSuggestions()} selectedSuggestion={selectedSuggestion} onFocus={onFocus} onBlur={onBlur} onSelectionAdd={onSelectionAdd} onInputValueChange={onInputValueChange} shouldRenderWithPortal />\n            </>;\n  }\n}",..._Combobox.parameters?.docs?.source}}},Clearable.parameters={...Clearable.parameters,docs:{...Clearable.parameters?.docs,source:{originalSource:"{\n  name: 'Clearable Combobox',\n  args: {\n    style: {\n      width: '650px'\n    },\n    useOptimizeListRender: false,\n    inputPlaceholder: 'Select something...',\n    noSuggestionsPlaceholder: 'No suggestions found...',\n    suggestionToString: SUGGESTION_TO_STRING,\n    clearTitle: 'Clear'\n  },\n  render: args => {\n    const [selectedSuggestion, setSelectedSuggestion] = React.useState<TSuggestion | undefined>();\n    const [inputValue, setInputValue] = React.useState('');\n    const getSuggestions = (): TSuggestion[] => SUGGESTIONS.filter(item => item.name.toLocaleLowerCase().includes(inputValue.toLocaleLowerCase()));\n    const onInputValueChange = (value: string) => {\n      console.log(`onInputValueChange was called with ${value}`);\n      setInputValue(value);\n    };\n    const onSelectionAdd = (item: TSuggestion) => {\n      console.log(`onSelectionAdd was called with {name: ${item?.name}}`);\n      setSelectedSuggestion(item);\n    };\n    const onFocus = () => {\n      console.log('onFocus was called');\n    };\n    const onBlur = () => {\n      console.log('onBlur was called');\n      setTimeout(() => setInputValue(''), 200);\n    };\n    const onClear = () => {\n      setSelectedSuggestion(undefined);\n    };\n    return <>\n                <Combobox<TSuggestion> {...args} suggestions={getSuggestions()} selectedSuggestion={selectedSuggestion} onFocus={onFocus} onBlur={onBlur} onSelectionAdd={onSelectionAdd} onInputValueChange={onInputValueChange} onClearAllSelected={onClear} showClearButton={!!selectedSuggestion} />\n            </>;\n  }\n}",...Clearable.parameters?.docs?.source}}},FreeInput.parameters={...FreeInput.parameters,docs:{...FreeInput.parameters?.docs,source:{originalSource:"{\n  name: 'Combobox with free input',\n  args: {\n    style: {\n      width: '650px'\n    },\n    useOptimizeListRender: false,\n    inputPlaceholder: 'Select something...',\n    noSuggestionsPlaceholder: 'No suggestions found...',\n    suggestionToString: SUGGESTION_TO_STRING,\n    clearTitle: 'Clear'\n  },\n  render: args => {\n    const [selectedSuggestion, setSelectedSuggestion] = React.useState<TSuggestion | undefined>();\n    const [inputValue, setInputValue] = React.useState('');\n    const getSuggestions = (): TSuggestion[] => {\n      const filtered = SUGGESTIONS.filter(item => item.name.toLocaleLowerCase().includes(inputValue.toLocaleLowerCase()));\n      const shouldShowInput = inputValue && !filtered.some(item => item.name.toLowerCase() === inputValue.toLowerCase());\n      return shouldShowInput ? [{\n        name: inputValue\n      }, ...filtered] : filtered;\n    };\n    const onInputValueChange = (value: string) => {\n      console.log(`onInputValueChange was called with ${value}`);\n      setInputValue(value);\n      if (selectedSuggestion) {\n        setSelectedSuggestion(undefined);\n      }\n    };\n    const onSelectionAdd = (item: TSuggestion) => {\n      console.log(`onSelectionAdd was called with {name: ${item?.name}}`);\n      setSelectedSuggestion(item);\n      setInputValue('');\n    };\n    const onOuterClick = () => {\n      console.log('onOuterClick was called');\n      if (inputValue) {\n        setSelectedSuggestion({\n          name: inputValue\n        });\n        setInputValue('');\n      }\n    };\n    const onFocus = () => {\n      console.log('onFocus was called');\n    };\n    const onBlur = () => {\n      console.log('onBlur was called');\n      setTimeout(() => setInputValue(''), 200);\n    };\n    const onClear = () => {\n      console.log('onClear was called');\n      setSelectedSuggestion(undefined);\n    };\n    return <>\n                <Combobox<TSuggestion> {...args} suggestions={getSuggestions()} selectedSuggestion={selectedSuggestion} onFocus={onFocus} onBlur={onBlur} onSelectionAdd={onSelectionAdd} onInputValueChange={onInputValueChange} onClearAllSelected={onClear} onOuterClick={onOuterClick} showClearButton={!!selectedSuggestion} />\n            </>;\n  }\n}",...FreeInput.parameters?.docs?.source}}};const __namedExportsOrder=["_Combobox","Clearable","FreeInput"]},"./src/components/SelectComponents/Autosuggest/__mocks__/suggestions.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{MK:function(){return SUGGESTIONS},lc:function(){return COMPLEX_SUGGESTIONS},r5:function(){return SUGGESTION_TO_STRING}});var SUGGESTIONS=[{name:"Sun"},{name:"Moon"},{name:"Mercury"},{name:"Venus"},{name:"Earth"},{name:"Mars"},{name:"Jupiter"},{name:"Saturn"},{name:"Neptune"},{name:"Pluto",disabled:!0}],COMPLEX_SUGGESTIONS=[{name:"Sun",type:"star"},{name:"Moon",type:"star"},{name:"Mercury",type:"planet"},{name:"Venus",type:"planet"},{name:"Earth",type:"planet"},{name:"Mars",type:"planet"},{name:"Jupiter",type:"planet"},{name:"Saturn",type:"planet"},{name:"Neptune",type:"planet"}],SUGGESTION_TO_STRING=function SUGGESTION_TO_STRING(item){return item?item.name:""}},"./node_modules/tslib/tslib.es6.mjs":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{Cl:function(){return __assign},Tt:function(){return __rest},fX:function(){return __spreadArray}});var __assign=function(){return __assign=Object.assign||function __assign(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)};function __rest(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t}Object.create;function __spreadArray(to,from,pack){if(pack||2===arguments.length)for(var ar,i=0,l=from.length;i<l;i++)!ar&&i in from||(ar||(ar=Array.prototype.slice.call(from,0,i)),ar[i]=from[i]);return to.concat(ar||Array.prototype.slice.call(from))}Object.create;"function"==typeof SuppressedError&&SuppressedError}}]);