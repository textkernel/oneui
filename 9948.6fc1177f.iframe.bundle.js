"use strict";(self.webpackChunk_textkernel_oneui=self.webpackChunk_textkernel_oneui||[]).push([[9948],{"./stories/organisms/Autosuggest.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CustomRender:function(){return CustomRender},Dance:function(){return Dance},MixedSuggestions:function(){return MixedSuggestions},Multiselect:function(){return Multiselect},SingleSelect:function(){return SingleSelect},__namedExportsOrder:function(){return __namedExportsOrder}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_textkernel_oneui__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/SelectComponents/Autosuggest/Autosuggest.tsx"),_textkernel_oneui_components_SelectComponents_Autosuggest_mocks_suggestions__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/SelectComponents/Autosuggest/__mocks__/suggestions.ts"),__assign=function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)},__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t},__spreadArray=function(to,from,pack){if(pack||2===arguments.length)for(var ar,i=0,l=from.length;i<l;i++)!ar&&i in from||(ar||(ar=Array.prototype.slice.call(from,0,i)),ar[i]=from[i]);return to.concat(ar||Array.prototype.slice.call(from))},searchFor={name:"",value:""},meta={title:"Organisms/Select Components/Autosuggest",component:_textkernel_oneui__WEBPACK_IMPORTED_MODULE_1__.G};__webpack_exports__.default=meta;var Multiselect={name:"Autosuggest as multi-select component",args:{id:"test",inputPlaceholder:"Select something...",suggestionToString:_textkernel_oneui_components_SelectComponents_Autosuggest_mocks_suggestions__WEBPACK_IMPORTED_MODULE_2__.r5,isLoading:!1,showClearButton:!0,clearTitle:"Clear",noSuggestionsPlaceholder:"No suggestions",hasSuggestions:!0},render:function render(_a){var hasSuggestions=_a.hasSuggestions,args=__rest(_a,["hasSuggestions"]),_b=react__WEBPACK_IMPORTED_MODULE_0__.useState([]),selectedSuggestions=_b[0],setSelectedSuggestions=_b[1];return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{width:"500px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_textkernel_oneui__WEBPACK_IMPORTED_MODULE_1__.G,__assign({},args,{selectedSuggestions:selectedSuggestions,suggestions:hasSuggestions?function getSuggestions(){return _textkernel_oneui_components_SelectComponents_Autosuggest_mocks_suggestions__WEBPACK_IMPORTED_MODULE_2__.MK.filter((function(item){return!selectedSuggestions.some((function(i){return item.name.toLocaleLowerCase()===i.name.toLocaleLowerCase()}))}))}():[],onSelectionAdd:function onSelectionAdd(item){console.log("onSelectionAdd was called with {name: ".concat(item.name,"}"));var selectedItem=__assign({},item);selectedSuggestions.some((function(i){return i.name===selectedItem.name}))||setSelectedSuggestions(__spreadArray(__spreadArray([],selectedSuggestions,!0),[selectedItem],!1))},onSelectionRemove:function onSelectionRemove(item){console.log("onSelectionRemove was called with {name: ".concat(item.name,"}")),setSelectedSuggestions(selectedSuggestions.filter((function(i){return i.name!==item.name})))},onClearAllSelected:function onClearAllSelected(){console.log("onClearAllSelected was called"),setSelectedSuggestions([])},shouldRenderWithPortal:!0})))}},SingleSelect={name:"Autosuggest as single-select component",args:{id:"test",inputPlaceholder:"Select something...",suggestionToString:_textkernel_oneui_components_SelectComponents_Autosuggest_mocks_suggestions__WEBPACK_IMPORTED_MODULE_2__.r5,isLoading:!1,showClearButton:!0,clearTitle:"Clear",hasSuggestions:!0},render:function render(_a){var hasSuggestions=_a.hasSuggestions,args=__rest(_a,["hasSuggestions"]),_b=react__WEBPACK_IMPORTED_MODULE_0__.useState(""),inputValue=_b[0],setInputValue=_b[1],_c=react__WEBPACK_IMPORTED_MODULE_0__.useState(""),singleSelectedText=_c[0],setSingleSelectedText=_c[1],inputRef=react__WEBPACK_IMPORTED_MODULE_0__.createRef(),customBlur=react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{alignSelf:"center",marginLeft:"6px"}},singleSelectedText);return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{width:"500px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_textkernel_oneui__WEBPACK_IMPORTED_MODULE_1__.G,__assign({},args,{suggestions:hasSuggestions?function getSuggestions(){return _textkernel_oneui_components_SelectComponents_Autosuggest_mocks_suggestions__WEBPACK_IMPORTED_MODULE_2__.MK.filter((function(item){return item.name.toLocaleLowerCase().includes(inputValue.toLocaleLowerCase())}))}():[],onBlur:function onBlur(){console.log("onBlur was called"),setInputValue(singleSelectedText||"")},onInputValueChange:function onInputValueChange(value){console.log("onInputValueChange was called with ".concat(value)),setInputValue(value)},onSelectionAdd:function onSelectionAdd(item){var _a;console.log("onSelectionAdd was called with {name: ".concat(item.name,"}")),setSingleSelectedText(item.name),null===(_a=inputRef.current)||void 0===_a||_a.blur()},onClearAllSelected:function onClearAllSelected(){console.log("onClearAllSelected was called"),setSingleSelectedText("")},inputRef:inputRef,initInputValue:singleSelectedText,customSelectionIndicator:singleSelectedText?customBlur:void 0})))}},CustomRender={name:"Autosuggest with custom item renderer",args:{id:"test",inputPlaceholder:"Select something...",suggestionToString:_textkernel_oneui_components_SelectComponents_Autosuggest_mocks_suggestions__WEBPACK_IMPORTED_MODULE_2__.r5,isLoading:!1,showClearButton:!0,clearTitle:"Clear",noSuggestionsPlaceholder:"No suggestions"},render:function render(args){var _a=react__WEBPACK_IMPORTED_MODULE_0__.useState([]),selectedSuggestions=_a[0],setSelectedSuggestions=_a[1];return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{width:"500px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_textkernel_oneui__WEBPACK_IMPORTED_MODULE_1__.G,__assign({},args,{selectedSuggestions:selectedSuggestions,suggestions:function getSuggestions(){return _textkernel_oneui_components_SelectComponents_Autosuggest_mocks_suggestions__WEBPACK_IMPORTED_MODULE_2__.lc.filter((function(item){return!selectedSuggestions.some((function(i){return item.name.toLocaleLowerCase()===i.name.toLocaleLowerCase()}))}))}(),suggestionItemRenderer:function suggestionRenderer(item,i,array){return item?0===i||item.type!==array[i-1].type?react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{borderTop:"1px solid var(--color-neutral-30)",width:"100%",margin:"-12px",padding:"12px"}},item.name,react__WEBPACK_IMPORTED_MODULE_0__.createElement("span",{style:{color:"grey",marginLeft:"6px"}},"- ".concat(item.type))):react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,item.name):null},onSelectionAdd:function onSelectionAdd(item){console.log("onSelectionAdd was called with {name: ".concat(item.name,"}"));var selectedItem=__assign({},item);selectedSuggestions.some((function(i){return i.name===selectedItem.name}))||setSelectedSuggestions(__spreadArray(__spreadArray([],selectedSuggestions,!0),[selectedItem],!1))},onSelectionRemove:function onSelectionRemove(item){console.log("onSelectionRemove was called with {name: ".concat(item.name,"}")),setSelectedSuggestions(selectedSuggestions.filter((function(i){return i.name!==item.name})))},onClearAllSelected:function onClearAllSelected(){console.log("onClearAllSelected was called"),setSelectedSuggestions([])}})))}},MixedSuggestions={name:"Autosuggest with selecting input as free text",args:{id:"test",inputPlaceholder:"Select something...",suggestionToString:_textkernel_oneui_components_SelectComponents_Autosuggest_mocks_suggestions__WEBPACK_IMPORTED_MODULE_2__.r5,isLoading:!1,showClearButton:!0,clearTitle:"Clear"},render:function render(args){var _a=react__WEBPACK_IMPORTED_MODULE_0__.useState([]),selectedSuggestions=_a[0],setSelectedSuggestions=_a[1],_b=react__WEBPACK_IMPORTED_MODULE_0__.useState(""),inputValue=_b[0],setInputValue=_b[1];searchFor.name='Search for "'.concat(inputValue,'"'),searchFor.value=inputValue;return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{width:"500px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_textkernel_oneui__WEBPACK_IMPORTED_MODULE_1__.G,__assign({},args,{selectedSuggestions:selectedSuggestions,suggestions:function getSuggestions(){var suggestions=_textkernel_oneui_components_SelectComponents_Autosuggest_mocks_suggestions__WEBPACK_IMPORTED_MODULE_2__.MK.filter((function(item){return item.name.toLocaleLowerCase()!==inputValue.toLocaleLowerCase()&&item.name.toLocaleLowerCase().includes(inputValue.toLocaleLowerCase())&&!selectedSuggestions.some((function(i){return item.name.toLocaleLowerCase()===i.name.toLocaleLowerCase()}))}));return inputValue.length?__spreadArray([searchFor],suggestions,!0):suggestions}(),onBlur:function onBlur(){console.log("onBlur was called"),setInputValue("")},allowMixingSuggestionsAndLoading:!!inputValue.length,onSelectionAdd:function onSelectionAdd(item){console.log("onSelectionAdd was called with {name: ".concat(item.name,"}"));var selectedItem=__assign({},item);item===searchFor&&(selectedItem={name:item.value}),selectedSuggestions.some((function(i){return i.name===selectedItem.name}))||setSelectedSuggestions(__spreadArray(__spreadArray([],selectedSuggestions,!0),[selectedItem],!1))},onSelectionRemove:function onSelectionRemove(item){console.log("onSelectionRemove was called with {name: ".concat(item.name,"}")),setInputValue("");var selectedItem=__assign({},item);inputValue||setSelectedSuggestions(selectedSuggestions.filter((function(i){return i.name!==selectedItem.name})))},onInputValueChange:function onInputValueChange(value){console.log("onInputValueChange was called with ".concat(value)),setInputValue(value)},onClearAllSelected:function onClearAllSelected(){console.log("onClearAllSelected was called"),setSelectedSuggestions([])}})))}},Dance={name:"Autosuggest as a dance of single and multi-selection",args:{id:"test",inputPlaceholder:"Select something...",suggestionToString:_textkernel_oneui_components_SelectComponents_Autosuggest_mocks_suggestions__WEBPACK_IMPORTED_MODULE_2__.r5,isLoading:!1,showClearButton:!0,clearTitle:"Clear"},render:function render(args){var _a=react__WEBPACK_IMPORTED_MODULE_0__.useState([]),selectedSuggestions=_a[0],setSelectedSuggestions=_a[1],_b=react__WEBPACK_IMPORTED_MODULE_0__.useState(""),singleSelectedText=_b[0],setSingleSelectedText=_b[1],_c=react__WEBPACK_IMPORTED_MODULE_0__.useState(""),inputValue=_c[0],setInputValue=_c[1],inputRef=react__WEBPACK_IMPORTED_MODULE_0__.createRef(),customBlur=react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{alignSelf:"center",marginLeft:"6px"}},singleSelectedText);return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{width:"500px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_textkernel_oneui__WEBPACK_IMPORTED_MODULE_1__.G,__assign({},args,{selectedSuggestions:selectedSuggestions,suggestions:function getSuggestions(){var autoSuggestions=_textkernel_oneui_components_SelectComponents_Autosuggest_mocks_suggestions__WEBPACK_IMPORTED_MODULE_2__.lc.filter((function(item){return item.name.toLocaleLowerCase().includes(inputValue.toLocaleLowerCase())&&!selectedSuggestions.some((function(i){return item.name.toLocaleLowerCase()===i.name.toLocaleLowerCase()}))}));return inputValue.length&&!selectedSuggestions.length?__spreadArray([{name:inputValue,type:"free-text"}],autoSuggestions,!0):autoSuggestions}(),onBlur:function onBlur(){console.log("onBlur was called"),setInputValue(singleSelectedText||"")},allowMixingSuggestionsAndLoading:!!inputValue.length,onSelectionAdd:function onSelectionAdd(item){var _a;if(console.log("onSelectionAdd was called with {name: ".concat(item.name,", type: ").concat(item.type,"}")),"free-text"===item.type)return setSingleSelectedText(item.name),void(null===(_a=inputRef.current)||void 0===_a||_a.blur());singleSelectedText&&setSingleSelectedText(""),setSelectedSuggestions(__spreadArray(__spreadArray([],selectedSuggestions,!0),[item],!1))},onSelectionRemove:function onSelectionRemove(item){console.log("onSelectionRemove was called with {name: ".concat(item.name,"}")),inputValue||setSelectedSuggestions(selectedSuggestions.filter((function(i){return i.name!==item.name})))},onInputValueChange:function onInputValueChange(value){console.log("onInputValueChange was called with ".concat(value)),setInputValue(value)},onClearAllSelected:function onClearAllSelected(){console.log("onClearAllSelected was called"),setSelectedSuggestions([]),setSingleSelectedText("")},onOuterClick:function onOuterClick(){console.log("onOuterClick was called"),!selectedSuggestions.length&&inputValue&&setSingleSelectedText(inputValue)},inputRef:inputRef,initInputValue:singleSelectedText,customSelectionIndicator:singleSelectedText?customBlur:void 0})))}};Multiselect.parameters={...Multiselect.parameters,docs:{...Multiselect.parameters?.docs,source:{originalSource:"{\n  name: 'Autosuggest as multi-select component',\n  args: {\n    id: 'test',\n    inputPlaceholder: 'Select something...',\n    suggestionToString: SUGGESTION_TO_STRING,\n    isLoading: false,\n    showClearButton: true,\n    clearTitle: 'Clear',\n    noSuggestionsPlaceholder: 'No suggestions',\n    hasSuggestions: true\n  },\n  render: ({\n    hasSuggestions,\n    ...args\n  }) => {\n    const [selectedSuggestions, setSelectedSuggestions] = React.useState<TSuggestion[]>([]);\n    const getSuggestions = (): TSuggestion[] => {\n      const suggestions = SUGGESTIONS.filter((item: TSuggestion) => !selectedSuggestions.some(i => item.name.toLocaleLowerCase() === i.name.toLocaleLowerCase()));\n      return suggestions;\n    };\n    const onSelectionAdd = (item: TSuggestion) => {\n      console.log(`onSelectionAdd was called with {name: ${item.name}}`);\n      const selectedItem = {\n        ...item\n      };\n      // Add new item\n      if (!selectedSuggestions.some((i: TSuggestion) => i.name === selectedItem.name)) {\n        setSelectedSuggestions([...selectedSuggestions, selectedItem]);\n      }\n    };\n    const onSelectionRemove = (item: TSuggestion) => {\n      console.log(`onSelectionRemove was called with {name: ${item.name}}`);\n      // Delete item\n      setSelectedSuggestions(selectedSuggestions.filter((i: TSuggestion) => i.name !== item.name));\n    };\n    const onClearAllSelected = () => {\n      console.log('onClearAllSelected was called');\n      setSelectedSuggestions([]);\n    };\n    return <div style={{\n      width: '500px'\n    }}>\n                <Autosuggest {...args as AutosuggestProps<TSuggestion>} selectedSuggestions={selectedSuggestions} suggestions={hasSuggestions ? getSuggestions() : []} onSelectionAdd={onSelectionAdd} onSelectionRemove={onSelectionRemove} onClearAllSelected={onClearAllSelected} shouldRenderWithPortal />\n            </div>;\n  }\n}",...Multiselect.parameters?.docs?.source}}},SingleSelect.parameters={...SingleSelect.parameters,docs:{...SingleSelect.parameters?.docs,source:{originalSource:"{\n  name: 'Autosuggest as single-select component',\n  args: {\n    id: 'test',\n    inputPlaceholder: 'Select something...',\n    suggestionToString: SUGGESTION_TO_STRING,\n    isLoading: false,\n    showClearButton: true,\n    clearTitle: 'Clear',\n    hasSuggestions: true\n  },\n  render: ({\n    hasSuggestions,\n    ...args\n  }) => {\n    const [inputValue, setInputValue] = React.useState('');\n    const [singleSelectedText, setSingleSelectedText] = React.useState('');\n    const inputRef = React.createRef<HTMLInputElement>();\n    const getSuggestions = (): TSuggestion[] =>\n    // filtering suggestions from some other source\n    SUGGESTIONS.filter((item: TSuggestion) =>\n    // suggestion is relevant to input\n    item.name.toLocaleLowerCase().includes(inputValue.toLocaleLowerCase()));\n    const onInputValueChange = (value: string) => {\n      console.log(`onInputValueChange was called with ${value}`);\n      setInputValue(value);\n    };\n\n    // most of the magic is happening here\n    const onSelectionAdd = (item: TSuggestion) => {\n      console.log(`onSelectionAdd was called with {name: ${item.name}}`);\n      setSingleSelectedText(item.name);\n      // Force UI behavior to single select - blur the field\n      inputRef.current?.blur();\n    };\n    const onBlur = () => {\n      console.log('onBlur was called');\n      // inputValue is used to filter suggestions,\n      // preserve it for free text selection, but not otherwise\n      setInputValue(singleSelectedText || '');\n    };\n    const onClearAllSelected = () => {\n      console.log('onClearAllSelected was called');\n      setSingleSelectedText('');\n    };\n\n    // Other magical prop -> will overwrite standard blurred render UI\n    const customBlur = <div style={{\n      alignSelf: 'center',\n      marginLeft: '6px'\n    }}>\n                {singleSelectedText}\n            </div>;\n    return <div style={{\n      width: '500px'\n    }}>\n                <Autosuggest {...args as AutosuggestProps<TSuggestion>} suggestions={hasSuggestions ? getSuggestions() : []} onBlur={onBlur} onInputValueChange={onInputValueChange} onSelectionAdd={onSelectionAdd} onClearAllSelected={onClearAllSelected} inputRef={inputRef}\n      // this will trick to UI to pre-fill the in input field when it gets focused again\n      initInputValue={singleSelectedText}\n      // Here we overwrite the UI default look when we have a selection\n      customSelectionIndicator={singleSelectedText ? customBlur : undefined} />\n            </div>;\n  }\n}",...SingleSelect.parameters?.docs?.source},description:{story:"This story demonstrates how you can add props and function to make it feel like a single select component.\nThe important parts here are:\n* passing inputRef prop, so we can access the input field from outside\n* calling inputRef.current.blur() in onSelectionAdd\n* when something was selected, passing a custom customSelectionIndicator node to\nalter the look and feel of the blurred component\n* passing initInputValue so that the input field gets populated when the component receives focus again.",...SingleSelect.parameters?.docs?.description}}},CustomRender.parameters={...CustomRender.parameters,docs:{...CustomRender.parameters?.docs,source:{originalSource:"{\n  name: 'Autosuggest with custom item renderer',\n  args: {\n    id: 'test',\n    inputPlaceholder: 'Select something...',\n    suggestionToString: SUGGESTION_TO_STRING,\n    isLoading: false,\n    showClearButton: true,\n    clearTitle: 'Clear',\n    noSuggestionsPlaceholder: 'No suggestions'\n  },\n  render: args => {\n    const [selectedSuggestions, setSelectedSuggestions] = React.useState<TComplexSuggestion[]>([]);\n    const getSuggestions = (): TComplexSuggestion[] => {\n      const suggestions = COMPLEX_SUGGESTIONS.filter((item: TComplexSuggestion) => !selectedSuggestions.some(i => item.name.toLocaleLowerCase() === i.name.toLocaleLowerCase()));\n      return suggestions;\n    };\n    const onSelectionAdd = (item: TComplexSuggestion) => {\n      console.log(`onSelectionAdd was called with {name: ${item.name}}`);\n      const selectedItem = {\n        ...item\n      };\n      // Add new item\n      if (!selectedSuggestions.some((i: TComplexSuggestion) => i.name === selectedItem.name)) {\n        setSelectedSuggestions([...selectedSuggestions, selectedItem]);\n      }\n    };\n    const onSelectionRemove = (item: TComplexSuggestion) => {\n      console.log(`onSelectionRemove was called with {name: ${item.name}}`);\n      // Delete item\n      setSelectedSuggestions(selectedSuggestions.filter((i: TComplexSuggestion) => i.name !== item.name));\n    };\n    const onClearAllSelected = () => {\n      console.log('onClearAllSelected was called');\n      setSelectedSuggestions([]);\n    };\n    const suggestionRenderer = (item: TComplexSuggestion | null, i: number, array: TComplexSuggestion[]) => {\n      if (!item) {\n        return null;\n      }\n      if (i === 0 || item.type !== array[i - 1].type) {\n        return <div style={{\n          borderTop: '1px solid var(--color-neutral-30)',\n          width: '100%',\n          margin: '-12px',\n          padding: '12px'\n        }}>\n                        {item.name}\n                        <span style={{\n            color: 'grey',\n            marginLeft: '6px'\n          }}>{`- ${item.type}`}</span>\n                    </div>;\n      }\n      return <div>{item.name}</div>;\n    };\n    return <div style={{\n      width: '500px'\n    }}>\n                <Autosuggest {...args} selectedSuggestions={selectedSuggestions} suggestions={getSuggestions()} suggestionItemRenderer={suggestionRenderer} onSelectionAdd={onSelectionAdd} onSelectionRemove={onSelectionRemove} onClearAllSelected={onClearAllSelected} />\n            </div>;\n  }\n}",...CustomRender.parameters?.docs?.source},description:{story:"This story demonstrates how you can apply a custom render function to adjust the look and feel of the suggestions",...CustomRender.parameters?.docs?.description}}},MixedSuggestions.parameters={...MixedSuggestions.parameters,docs:{...MixedSuggestions.parameters?.docs,source:{originalSource:"{\n  name: 'Autosuggest with selecting input as free text',\n  args: {\n    id: 'test',\n    inputPlaceholder: 'Select something...',\n    suggestionToString: SUGGESTION_TO_STRING,\n    isLoading: false,\n    showClearButton: true,\n    clearTitle: 'Clear'\n  },\n  render: args => {\n    const [selectedSuggestions, setSelectedSuggestions] = React.useState<TSuggestion[]>([]);\n    const [inputValue, setInputValue] = React.useState('');\n    searchFor.name = `Search for \"${inputValue}\"`;\n    searchFor.value = inputValue;\n    const getSuggestions = (): TSuggestion[] => {\n      const suggestions = SUGGESTIONS.filter((item: TSuggestion) => item.name.toLocaleLowerCase() !== inputValue.toLocaleLowerCase() && item.name.toLocaleLowerCase().includes(inputValue.toLocaleLowerCase()) && !selectedSuggestions.some(i => item.name.toLocaleLowerCase() === i.name.toLocaleLowerCase()));\n      if (inputValue.length) {\n        return [searchFor, ...suggestions];\n      }\n      return suggestions;\n    };\n    const onInputValueChange = (value: string) => {\n      console.log(`onInputValueChange was called with ${value}`);\n      setInputValue(value);\n    };\n    const onSelectionAdd = (item: TSuggestion) => {\n      console.log(`onSelectionAdd was called with {name: ${item.name}}`);\n      let selectedItem = {\n        ...item\n      };\n      if (item === searchFor) {\n        selectedItem = {\n          name: (item as typeof searchFor).value\n        };\n      }\n      // Add new item\n      if (!selectedSuggestions.some((i: TSuggestion) => i.name === selectedItem.name)) {\n        setSelectedSuggestions([...selectedSuggestions, selectedItem]);\n      }\n    };\n    const onSelectionRemove = (item: TSuggestion) => {\n      console.log(`onSelectionRemove was called with {name: ${item.name}}`);\n      setInputValue('');\n      const selectedItem = {\n        ...item\n      };\n      // Delete item\n      if (!inputValue) {\n        setSelectedSuggestions(selectedSuggestions.filter((i: TSuggestion) => i.name !== selectedItem.name));\n      }\n    };\n    const onBlur = () => {\n      console.log('onBlur was called');\n      setInputValue('');\n    };\n    const onClearAllSelected = () => {\n      console.log('onClearAllSelected was called');\n      setSelectedSuggestions([]);\n    };\n    return <div style={{\n      width: '500px'\n    }}>\n                <Autosuggest {...args} selectedSuggestions={selectedSuggestions} suggestions={getSuggestions()} onBlur={onBlur} allowMixingSuggestionsAndLoading={!!inputValue.length} onSelectionAdd={onSelectionAdd} onSelectionRemove={onSelectionRemove} onInputValueChange={onInputValueChange} onClearAllSelected={onClearAllSelected} />\n            </div>;\n  }\n}",...MixedSuggestions.parameters?.docs?.source},description:{story:"This story demonstrates how you can mix these dynamic suggestions with static ones (e.g. based on user input),\nand how those can be shown during the loading state as well",...MixedSuggestions.parameters?.docs?.description}}},Dance.parameters={...Dance.parameters,docs:{...Dance.parameters?.docs,source:{originalSource:"{\n  name: 'Autosuggest as a dance of single and multi-selection',\n  args: {\n    id: 'test',\n    inputPlaceholder: 'Select something...',\n    suggestionToString: SUGGESTION_TO_STRING,\n    isLoading: false,\n    showClearButton: true,\n    clearTitle: 'Clear'\n  },\n  render: args => {\n    const [selectedSuggestions, setSelectedSuggestions] = React.useState<TComplexSuggestion[]>([]);\n    const [singleSelectedText, setSingleSelectedText] = React.useState('');\n    const [inputValue, setInputValue] = React.useState('');\n    const inputRef = React.createRef<HTMLInputElement>();\n    const getSuggestions = (): TComplexSuggestion[] => {\n      // filtering suggestions from some other source\n      const autoSuggestions = COMPLEX_SUGGESTIONS.filter((item: TComplexSuggestion) =>\n      // suggestion is relevant to input\n      item.name.toLocaleLowerCase().includes(inputValue.toLocaleLowerCase()) &&\n      // suggestion not yet selected\n      !selectedSuggestions.some(i => item.name.toLocaleLowerCase() === i.name.toLocaleLowerCase()));\n\n      // add free text option if there is an input by the user and not other suggestions were selected yet\n      return inputValue.length && !selectedSuggestions.length ? [{\n        name: inputValue,\n        type: 'free-text'\n      }, ...autoSuggestions] : autoSuggestions;\n    };\n    const onInputValueChange = (value: string) => {\n      console.log(`onInputValueChange was called with ${value}`);\n      setInputValue(value);\n    };\n\n    // most of the magic is happening here\n    const onSelectionAdd = (item: TComplexSuggestion) => {\n      console.log(`onSelectionAdd was called with {name: ${item.name}, type: ${item.type}}`);\n      // Selected option requires single select behavior\n      if (item.type === 'free-text') {\n        // save the value to our 'single select' state\n        setSingleSelectedText(item.name);\n        // Force UI behavior to single select - blur the field\n        inputRef.current?.blur();\n        // all done\n        return;\n      }\n\n      // a multi selectable option was chosen\n      // it is where the user can replace previously selected free text with something else\n      // remove previously selected free text\n      if (singleSelectedText) {\n        setSingleSelectedText('');\n      }\n      // Add new item to multi selection list\n      setSelectedSuggestions([...selectedSuggestions, item]);\n    };\n    const onSelectionRemove = (item: TSuggestion) => {\n      console.log(`onSelectionRemove was called with {name: ${item.name}}`);\n\n      // Delete item\n      if (!inputValue) {\n        setSelectedSuggestions(selectedSuggestions.filter((i: TSuggestion) => i.name !== item.name));\n      }\n    };\n    const onBlur = () => {\n      console.log('onBlur was called');\n      // inputValue is used to filter suggestions,\n      // preserve it for free text selection, but not otherwise\n      setInputValue(singleSelectedText || '');\n    };\n    const onOuterClick = () => {\n      console.log('onOuterClick was called');\n      // if the user clicked outside, after typing something, but without selecting any suggestions\n      // we should treat the typed value as a selection\n      if (!selectedSuggestions.length && inputValue) {\n        setSingleSelectedText(inputValue);\n      }\n    };\n\n    // Make sure to clear both states that hold selections\n    const onClearAllSelected = () => {\n      console.log('onClearAllSelected was called');\n      setSelectedSuggestions([]);\n      setSingleSelectedText('');\n    };\n\n    // Other magical prop -> will overwrite standard blurred render UI\n    const customBlur = <div style={{\n      alignSelf: 'center',\n      marginLeft: '6px'\n    }}>\n                {singleSelectedText}\n            </div>;\n    return <div style={{\n      width: '500px'\n    }}>\n                <Autosuggest {...args} selectedSuggestions={selectedSuggestions} suggestions={getSuggestions()} onBlur={onBlur} allowMixingSuggestionsAndLoading={!!inputValue.length} onSelectionAdd={onSelectionAdd} onSelectionRemove={onSelectionRemove} onInputValueChange={onInputValueChange} onClearAllSelected={onClearAllSelected} onOuterClick={onOuterClick} inputRef={inputRef}\n      // this will trick to UI to pre-fill the in input field when it gets focused again\n      initInputValue={singleSelectedText}\n      // Here we switch the UI behavior based on our local state\n      customSelectionIndicator={singleSelectedText ? customBlur : undefined} />\n            </div>;\n  }\n}",...Dance.parameters?.docs?.source},description:{story:"This story demonstrates how you can add props and function to allow mix of single select and multi select options together.\nThe business case we demonstrate here is has the following requirements:\n* The user can select free text input\n* When free text input is selected it should behave as a single select component\n* All other suggestions can be selected in a multi-select fashion.\n\nThe **important parts** here are:\n* passing inputRef prop, so we can access the input field from outside\n* calling inputRef.current.blur() in onSelectionAdded callback when needed\nwhen a _single selection happened_:\n* passing a custom customSelectionIndicator node to alter the look and feel of the blurred component\n* passing initInputValue so that the input field gets populated when the component receives focus again.",...Dance.parameters?.docs?.description}}};const __namedExportsOrder=["Multiselect","SingleSelect","CustomRender","MixedSuggestions","Dance"];try{SingleSelect.displayName="SingleSelect",SingleSelect.__docgenInfo={description:"This story demonstrates how you can add props and function to make it feel like a single select component.\nThe important parts here are:\n* passing inputRef prop, so we can access the input field from outside\n* calling inputRef.current.blur() in onSelectionAdd\n* when something was selected, passing a custom customSelectionIndicator node to\nalter the look and feel of the blurred component\n* passing initInputValue so that the input field gets populated when the component receives focus again.",displayName:"SingleSelect",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/organisms/Autosuggest.stories.tsx#SingleSelect"]={docgenInfo:SingleSelect.__docgenInfo,name:"SingleSelect",path:"stories/organisms/Autosuggest.stories.tsx#SingleSelect"})}catch(__react_docgen_typescript_loader_error){}try{CustomRender.displayName="CustomRender",CustomRender.__docgenInfo={description:"This story demonstrates how you can apply a custom render function to adjust the look and feel of the suggestions",displayName:"CustomRender",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/organisms/Autosuggest.stories.tsx#CustomRender"]={docgenInfo:CustomRender.__docgenInfo,name:"CustomRender",path:"stories/organisms/Autosuggest.stories.tsx#CustomRender"})}catch(__react_docgen_typescript_loader_error){}try{MixedSuggestions.displayName="MixedSuggestions",MixedSuggestions.__docgenInfo={description:"This story demonstrates how you can mix these dynamic suggestions with static ones (e.g. based on user input),\nand how those can be shown during the loading state as well",displayName:"MixedSuggestions",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/organisms/Autosuggest.stories.tsx#MixedSuggestions"]={docgenInfo:MixedSuggestions.__docgenInfo,name:"MixedSuggestions",path:"stories/organisms/Autosuggest.stories.tsx#MixedSuggestions"})}catch(__react_docgen_typescript_loader_error){}try{Dance.displayName="Dance",Dance.__docgenInfo={description:"This story demonstrates how you can add props and function to allow mix of single select and multi select options together.\nThe business case we demonstrate here is has the following requirements:\n* The user can select free text input\n* When free text input is selected it should behave as a single select component\n* All other suggestions can be selected in a multi-select fashion.\n\nThe **important parts** here are:\n* passing inputRef prop, so we can access the input field from outside\n* calling inputRef.current.blur() in onSelectionAdded callback when needed\nwhen a _single selection happened_:\n* passing a custom customSelectionIndicator node to alter the look and feel of the blurred component\n* passing initInputValue so that the input field gets populated when the component receives focus again.",displayName:"Dance",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/organisms/Autosuggest.stories.tsx#Dance"]={docgenInfo:Dance.__docgenInfo,name:"Dance",path:"stories/organisms/Autosuggest.stories.tsx#Dance"})}catch(__react_docgen_typescript_loader_error){}},"./src/components/SelectComponents/Autosuggest/Autosuggest.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{G:function(){return Autosuggest_Autosuggest}});var react=__webpack_require__("./node_modules/react/index.js"),bem=__webpack_require__("./src/utils/bem/bem.js"),index_esm=__webpack_require__("./node_modules/react-icons/md/index.esm.js"),__assign=function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)},__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t},_a=(0,bem.T)("SuggestionTag",{SuggestionTag:"SuggestionTag--ufmHPnV5Tr","SuggestionTag--block":"SuggestionTag--block--YsX7_sAi4J","SuggestionTag--small":"SuggestionTag--small--FSmbOAcjML",SuggestionTag__label:"SuggestionTag__label--qhqICxiWRV",SuggestionTag__button:"SuggestionTag__button--WQlUGFOXBh"}),block=_a.block,elem=_a.elem,SuggestionTag_SuggestionTag=function SuggestionTag(_a){var _b,_c=_a.width,width=void 0===_c?"auto":_c,children=_a.children,onClick=_a.onClick,rest=__rest(_a,["width","children","onClick"]);return"number"==typeof children||children?react.createElement("div",__assign({},rest,block(((_b={})[width||"auto"]=!0,_b))),react.createElement("div",__assign({title:children},elem("label")),children),onClick?react.createElement("button",__assign({onClick:onClick,type:"button"},elem("button")),react.createElement(index_esm.m6K,null)):null):null};SuggestionTag_SuggestionTag.displayName="SuggestionTag";try{SuggestionTag_SuggestionTag.displayName="SuggestionTag",SuggestionTag_SuggestionTag.__docgenInfo={description:"",displayName:"SuggestionTag",props:{width:{defaultValue:{value:"auto"},description:"Defines with behavior for tag",name:"width",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"auto"'},{value:'"block"'}]}},onClick:{defaultValue:null,description:"Clicked on delete button",name:"onClick",required:!1,type:{name:"((e: MouseEvent<Element, MouseEvent>) => void)"}},children:{defaultValue:null,description:"Tag content",name:"children",required:!1,type:{name:"ReactNode"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/SelectComponents/Autosuggest/SuggestionTag/SuggestionTag.tsx#SuggestionTag"]={docgenInfo:SuggestionTag_SuggestionTag.__docgenInfo,name:"SuggestionTag",path:"src/components/SelectComponents/Autosuggest/SuggestionTag/SuggestionTag.tsx#SuggestionTag"})}catch(__react_docgen_typescript_loader_error){}var SuggestionsList=__webpack_require__("./src/components/SelectComponents/SuggestionsList/SuggestionsList.tsx"),SelectBase=__webpack_require__("./src/components/SelectComponents/SelectBase/SelectBase.tsx"),keyboard=__webpack_require__("./src/constants/keyboard.ts"),Autosuggest_assign=function(){return Autosuggest_assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},Autosuggest_assign.apply(this,arguments)},Autosuggest_rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t},__spreadArray=function(to,from,pack){if(pack||2===arguments.length)for(var ar,i=0,l=from.length;i<l;i++)!ar&&i in from||(ar||(ar=Array.prototype.slice.call(from,0,i)),ar[i]=from[i]);return to.concat(ar||Array.prototype.slice.call(from))},Autosuggest_elem=(0,bem.T)("Autosuggest",{Autosuggest__wrapper:"Autosuggest__wrapper--AvOKnU1hRi","Autosuggest__wrapper--isFocused":"Autosuggest__wrapper--isFocused--RWiKgjM4i1",Autosuggest__input:"Autosuggest__input--TPLYI76DkA","Autosuggest__input--hidden":"Autosuggest__input--hidden--WGh2OaY30T"}).elem;function Autosuggest_Autosuggest(_a){var _b=_a.id,id=void 0===_b?void 0:_b,onInputValueChange=_a.onInputValueChange,onSelectionAdd=_a.onSelectionAdd,_c=_a.selectedSuggestions,selectedSuggestions=void 0===_c?[]:_c,suggestionToString=_a.suggestionToString,suggestionToKey=_a.suggestionToKey,suggestionItemRenderer=_a.suggestionItemRenderer,inputPlaceholder=_a.inputPlaceholder,_d=_a.noSuggestionsPlaceholder,noSuggestionsPlaceholder=void 0===_d?"":_d,_e=_a.useOptimizeListRender,useOptimizeListRender=void 0!==_e&&_e,suggestions=_a.suggestions,_f=_a.isLoading,isLoading=void 0!==_f&&_f,_g=_a.numberOfVisibleTags,numberOfVisibleTags=void 0===_g?3:_g,_h=_a.allowMixingSuggestionsAndLoading,allowMixingSuggestionsAndLoading=void 0!==_h&&_h,onFocus=_a.onFocus,onBlur=_a.onBlur,_j=_a.onSubmit,onSubmit=void 0===_j?function(){return null}:_j,showClearButton=_a.showClearButton,_k=_a.onSelectionRemove,onSelectionRemove=void 0===_k?function(){return null}:_k,inputRefFromProps=_a.inputRef,_l=_a.customSelectionIndicator,customSelectionIndicator=void 0===_l?void 0:_l,initInputValue=_a.initInputValue,_m=_a.inputAttrs,inputAttrs=void 0===_m?{}:_m,isFocused=_a.isFocused,iconNode=_a.iconNode,customListRender=_a.customListRender,_o=_a.clearInputAfterSelection,clearInputAfterSelection=void 0===_o||_o,_p=_a.shouldRenderWithPortal,shouldRenderWithPortal=void 0!==_p&&_p,rest=Autosuggest_rest(_a,["id","onInputValueChange","onSelectionAdd","selectedSuggestions","suggestionToString","suggestionToKey","suggestionItemRenderer","inputPlaceholder","noSuggestionsPlaceholder","useOptimizeListRender","suggestions","isLoading","numberOfVisibleTags","allowMixingSuggestionsAndLoading","onFocus","onBlur","onSubmit","showClearButton","onSelectionRemove","inputRef","customSelectionIndicator","initInputValue","inputAttrs","isFocused","iconNode","customListRender","clearInputAfterSelection","shouldRenderWithPortal"]),inputRef=inputRefFromProps||react.createRef(),_q=react.useState(""),inputValue=_q[0],setInputValue=_q[1],renderIcon=function renderIcon(){return iconNode&&react.cloneElement(iconNode,Autosuggest_elem("spacedElem",{elemClassName:iconNode.props.className}))},isClearButtonShown=customSelectionIndicator?showClearButton:showClearButton&&selectedSuggestions.length>0;return react.createElement(SelectBase.o,Autosuggest_assign({},rest,{suggestions:suggestions,suggestionToString:suggestionToString,inputRef:inputRef,onFocus:onFocus,onBlur:onBlur,onSelectionAdd:onSelectionAdd,onInputValueChange:function handleInputValueChange(value){null==onInputValueChange||onInputValueChange(value),setInputValue(value)},listRenderer:function renderList(listProps){return void 0!==customListRender&&!isLoading&&inputValue?customListRender(Autosuggest_assign({},listProps)):suggestions&&suggestions.length>0||inputValue?react.createElement(SuggestionsList.S,Autosuggest_assign({},listProps,{allowMixingSuggestionsAndLoading:allowMixingSuggestionsAndLoading,isLoading:isLoading,useOptimizeRender:useOptimizeListRender,suggestionToKey:suggestionToKey,suggestionItemRenderer:suggestionItemRenderer,noSuggestionsPlaceholder:noSuggestionsPlaceholder,passDisabledToListItems:!0})):null},focusedRenderer:function renderFocused(_a){var getInputProps=_a.getInputProps,onFocusInput=_a.onFocus,highlightedIndex=_a.highlightedIndex;return react.createElement("div",Autosuggest_assign({},Autosuggest_elem("wrapper",{isFocused:!0})),renderIcon(),function renderFullTagsList(){return selectedSuggestions.map((function(item){return react.createElement(SuggestionTag_SuggestionTag,{key:suggestionToString(item),onClick:function onClick(){return null==onSelectionRemove?void 0:onSelectionRemove(item)}},suggestionToString(item))}))}(),react.createElement("input",Autosuggest_assign({},getInputProps(Autosuggest_assign(Autosuggest_assign(Autosuggest_assign({},inputAttrs),{id:id,ref:inputRef,placeholder:inputPlaceholder,onFocus:onFocusInput,onKeyDown:function onKeyDown(e){return function handleInputKeyDown(event,highlightedIndex){var _a,isHighlighted=null!==highlightedIndex&&highlightedIndex>-1;if(event.key!==keyboard.jD||inputValue||isHighlighted){if(event.key===keyboard.aH)null===(_a=inputRef.current)||void 0===_a||_a.blur();else if(event.key===keyboard.oJ&&!inputValue&&selectedSuggestions.length){var lastItem=selectedSuggestions[selectedSuggestions.length-1];null==onSelectionRemove||onSelectionRemove(lastItem)}}else event.nativeEvent.preventDownshiftDefault=!0,null==onSubmit||onSubmit()}(e,highlightedIndex)},"data-lpignore":!0}),Autosuggest_elem("input"))))))},blurredRenderer:function renderBlurred(_a){var getInputProps=_a.getInputProps,onFocusInput=_a.onFocus,selectionIndicator=customSelectionIndicator||function renderShortTagsList(){var visibleTags=selectedSuggestions.slice(0,numberOfVisibleTags),numberOfHiddenTags=selectedSuggestions.slice(numberOfVisibleTags).length,visibleTagsList=visibleTags.map((function(item){return react.createElement(SuggestionTag_SuggestionTag,{key:suggestionToString(item),width:numberOfHiddenTags>0?"block":"auto"},suggestionToString(item))}));if(numberOfHiddenTags>0){var counter=react.createElement(SuggestionTag_SuggestionTag,{key:"counter",width:"small"},"+".concat(numberOfHiddenTags));return __spreadArray(__spreadArray([],visibleTagsList,!0),[counter],!1)}return visibleTagsList}(),placeholder=0===selectedSuggestions.length?inputPlaceholder:"",isHidden=!!customSelectionIndicator||selectedSuggestions.length>0;return react.createElement("div",Autosuggest_assign({},Autosuggest_elem("wrapper")),renderIcon(),selectionIndicator,react.createElement("input",Autosuggest_assign({},getInputProps(Autosuggest_assign(Autosuggest_assign(Autosuggest_assign({},inputAttrs),{id:id,ref:inputRef,placeholder:placeholder,"data-lpignore":!0,onFocus:onFocusInput}),Autosuggest_elem("input",{hidden:isHidden}))))))},showClearButton:isClearButtonShown,highlightOnEmptyInput:!1,keepExpandedAfterSelection:!0,initInputValue:initInputValue,clearInputAfterSelection:clearInputAfterSelection,autoFocus:isFocused,shouldRenderWithPortal:shouldRenderWithPortal}))}Autosuggest_Autosuggest.displayName="Autosuggest";try{Autosuggest_Autosuggest.displayName="Autosuggest",Autosuggest_Autosuggest.__docgenInfo={description:"The Autosuggest component is recommended to use for a dynamic list of values.\nIt is geared toward a multi-select use-case, but you can use it in single select mode too\nor even a combination of the two. See related story for details.\nThe list of suggestions is shown once there's a value inside the input.\n\nMore detailed face-to-face comparison of Select components can be found\n[here](https://docs.google.com/spreadsheets/d/1VyYR54RpNaPWLBXOoBPkFEkmzLS_LfEEGdm1ZTTOcHU/edit#gid=0)`,",displayName:"Autosuggest",props:{id:{defaultValue:{value:"undefined"},description:"HTML id for the input element",name:"id",required:!1,type:{name:"string"}},suggestionToKey:{defaultValue:null,description:"Creates a unique (React) key for a suggestion item. If undefined suggestionToString will be used",name:"suggestionToKey",required:!1,type:{name:"((suggestions: S) => string)"}},selectedSuggestions:{defaultValue:{value:"[]"},description:"An array of already selected suggestions",name:"selectedSuggestions",required:!1,type:{name:"S[]"}},numberOfVisibleTags:{defaultValue:{value:"3"},description:"Number of visible tags in blur mode",name:"numberOfVisibleTags",required:!1,type:{name:"number"}},inputPlaceholder:{defaultValue:null,description:"String to be shown in the input field when no value is typed",name:"inputPlaceholder",required:!0,type:{name:"string"}},noSuggestionsPlaceholder:{defaultValue:{value:""},description:"String to be shown when no suggestions are available",name:"noSuggestionsPlaceholder",required:!1,type:{name:"string"}},allowMixingSuggestionsAndLoading:{defaultValue:{value:"false"},description:"Defines if suggestions list is visible even while loading other elements",name:"allowMixingSuggestionsAndLoading",required:!1,type:{name:"boolean"}},useOptimizeListRender:{defaultValue:{value:"false"},description:"Enable ListOptimizer component for decreasing render time",name:"useOptimizeListRender",required:!1,type:{name:"boolean"}},onSelectionRemove:{defaultValue:{value:"() => null"},description:"Function to be called when a suggestion is removed",name:"onSelectionRemove",required:!1,type:{name:"((item: S) => void)"}},onSubmit:{defaultValue:{value:"() => null"},description:"Function to be called on submitting form",name:"onSubmit",required:!1,type:{name:"(() => void)"}},isLoading:{defaultValue:{value:"false"},description:"If suggestions are still loading, i.e. display placeholders",name:"isLoading",required:!1,type:{name:"boolean"}},customSelectionIndicator:{defaultValue:{value:"undefined"},description:"Means to overwrite the look and feel of the UI in its blurred state.\nIt should be null or undefined if there is no selection yet",name:"customSelectionIndicator",required:!1,type:{name:"ReactNode"}},inputAttrs:{defaultValue:{value:"{}"},description:"Additional HTML attributes to be applied to the input element",name:"inputAttrs",required:!1,type:{name:"DictionaryOf<string | boolean>"}},isFocused:{defaultValue:null,description:"trigger of the initial focus of the input field",name:"isFocused",required:!1,type:{name:"boolean"}},iconNode:{defaultValue:null,description:"icon which should render",name:"iconNode",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},customListRender:{defaultValue:null,description:"render custom list values",name:"customListRender",required:!1,type:{name:"((suggestions: any) => ReactNode)"}},clearInputAfterSelection:{defaultValue:{value:"true"},description:"",name:"clearInputAfterSelection",required:!1,type:{name:"boolean"}},shouldRenderWithPortal:{defaultValue:{value:"false"},description:"determines if the suggestion list should be rendered using a React Portal\nto the dropdown needs to bypass parent element clipping, overflow, or z-index issues.",name:"shouldRenderWithPortal",required:!1,type:{name:"boolean"}},suggestions:{defaultValue:null,description:'an array of objects or strings that will be used to render the suggestions list.\nif you want to disabled some of the items, this props needs to be an array of objects,\nwhere the object has a property "disabled" set true as needed.',name:"suggestions",required:!0,type:{name:"S[]"}},suggestionToString:{defaultValue:null,description:"suggestionToString(suggestion) should return a string to be displayed in the UI. e.g.: suggestion => suggestion.name",name:"suggestionToString",required:!0,type:{name:"(suggestions?: S | null | undefined) => string"}},suggestionItemRenderer:{defaultValue:null,description:"render function for suggestion list item. If undefined, suggestionToString will be used.",name:"suggestionItemRenderer",required:!1,type:{name:"((suggestions: S | null, index: number, array: S[]) => ReactNode)"}},rootRef:{defaultValue:null,description:"root wrapper ref",name:"rootRef",required:!1,type:{name:"RefObject<HTMLDivElement>"}},listRef:{defaultValue:null,description:"suggestions list ref",name:"listRef",required:!1,type:{name:"RefObject<HTMLUListElement>"}},disabled:{defaultValue:null,description:"defines if the component is disabled",name:"disabled",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"a class to be applied to the top level div",name:"className",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"onFocus() is called when the component is focused",name:"onFocus",required:!1,type:{name:"(() => void)"}},onBlur:{defaultValue:null,description:"onBlur() is called when the component is blurred",name:"onBlur",required:!1,type:{name:"(() => void)"}},onSelectionAdd:{defaultValue:null,description:"onSelectionAdd() called when a suggestion is selected",name:"onSelectionAdd",required:!0,type:{name:"(item: S) => void"}},onOuterClick:{defaultValue:null,description:"a callback to be called when outer click happens",name:"onOuterClick",required:!1,type:{name:"(() => void)"}},clearTitle:{defaultValue:null,description:"to be shown as clear button title",name:"clearTitle",required:!1,type:{name:"ReactNode"}},onClearAllSelected:{defaultValue:null,description:"function to be called if FieldWrapper clear button is clicked",name:"onClearAllSelected",required:!1,type:{name:"(() => void)"}},showClearButton:{defaultValue:null,description:"show Clear button on hover even if there are no selectedSuggestions passed",name:"showClearButton",required:!1,type:{name:"boolean"}},inputRef:{defaultValue:null,description:"input field ref",name:"inputRef",required:!1,type:{name:"RefObject<HTMLElement>"}},onInputValueChange:{defaultValue:null,description:"onInputValueChange(inputValue) called when the input values is changed. Can be used to implement the component as controlled component",name:"onInputValueChange",required:!1,type:{name:"((value: string) => void)"}},initInputValue:{defaultValue:null,description:"Initial input value should be shown if input gets focused",name:"initInputValue",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/SelectComponents/Autosuggest/Autosuggest.tsx#Autosuggest"]={docgenInfo:Autosuggest_Autosuggest.__docgenInfo,name:"Autosuggest",path:"src/components/SelectComponents/Autosuggest/Autosuggest.tsx#Autosuggest"})}catch(__react_docgen_typescript_loader_error){}},"./src/components/SelectComponents/Autosuggest/__mocks__/suggestions.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{MK:function(){return SUGGESTIONS},lc:function(){return COMPLEX_SUGGESTIONS},r5:function(){return SUGGESTION_TO_STRING}});var SUGGESTIONS=[{name:"Sun"},{name:"Moon"},{name:"Mercury"},{name:"Venus"},{name:"Earth"},{name:"Mars"},{name:"Jupiter"},{name:"Saturn"},{name:"Neptune"},{name:"Pluto",disabled:!0}],COMPLEX_SUGGESTIONS=[{name:"Sun",type:"star"},{name:"Moon",type:"star"},{name:"Mercury",type:"planet"},{name:"Venus",type:"planet"},{name:"Earth",type:"planet"},{name:"Mars",type:"planet"},{name:"Jupiter",type:"planet"},{name:"Saturn",type:"planet"},{name:"Neptune",type:"planet"}],SUGGESTION_TO_STRING=function SUGGESTION_TO_STRING(item){return item?item.name:""}},"./node_modules/tslib/tslib.es6.mjs":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{Cl:function(){return __assign},Tt:function(){return __rest},fX:function(){return __spreadArray}});var __assign=function(){return __assign=Object.assign||function __assign(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)};function __rest(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t}Object.create;function __spreadArray(to,from,pack){if(pack||2===arguments.length)for(var ar,i=0,l=from.length;i<l;i++)!ar&&i in from||(ar||(ar=Array.prototype.slice.call(from,0,i)),ar[i]=from[i]);return to.concat(ar||Array.prototype.slice.call(from))}Object.create;"function"==typeof SuppressedError&&SuppressedError}}]);