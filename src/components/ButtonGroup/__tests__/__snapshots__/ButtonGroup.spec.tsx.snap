// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ButtonGroup> that renders a button should add classes when props are changed 1`] = `
<ButtonGroup
  context="neutral"
  isBlock={true}
  size="large"
>
  <div
    className="ButtonGroup ButtonGroup--isBlock"
    role="group"
  >
    <Button
      className="ButtonGroup__button ButtonGroup__button--isBlock ButtonGroup__button--context_neutral ButtonGroup__button--first"
      context="neutral"
      disabled={false}
      isBlock={false}
      isInline={false}
      isLoading={false}
      key=".0"
      size="large"
      type="button"
    >
      <button
        className="Button Button--context_neutral Button--size_large ButtonGroup__button ButtonGroup__button--isBlock ButtonGroup__button--context_neutral ButtonGroup__button--first"
        disabled={false}
        type="button"
      >
        A button
      </button>
    </Button>
    <Button
      className="ButtonGroup__button ButtonGroup__button--isBlock ButtonGroup__button--context_neutral ButtonGroup__button--last"
      context="neutral"
      disabled={false}
      isBlock={false}
      isInline={false}
      isLoading={false}
      key=".1"
      size="large"
      type="button"
    >
      <button
        className="Button Button--context_neutral Button--size_large ButtonGroup__button ButtonGroup__button--isBlock ButtonGroup__button--context_neutral ButtonGroup__button--last"
        disabled={false}
        type="button"
      >
        Another button
      </button>
    </Button>
  </div>
</ButtonGroup>
`;

exports[`<ButtonGroup> that renders a button should pass main props, but not add styles if there is only 1 child 1`] = `
<ButtonGroup
  context="warning"
  isBlock={true}
  size="small"
>
  <div
    className="ButtonGroup ButtonGroup--isBlock"
    role="group"
  >
    <Button
      context="warning"
      disabled={false}
      isBlock={true}
      isInline={false}
      isLoading={false}
      size="small"
      type="button"
    >
      <button
        className="Button Button--context_warning Button--size_small Button--isBlock"
        disabled={false}
        type="button"
      >
        A button
      </button>
    </Button>
  </div>
</ButtonGroup>
`;

exports[`<ButtonGroup> that renders a button should render default button correctly 1`] = `
<ButtonGroup
  context="neutral"
  isBlock={false}
  size="normal"
>
  <div
    className="ButtonGroup"
    role="group"
  >
    <Button
      className="ButtonGroup__button ButtonGroup__button--context_neutral ButtonGroup__button--first"
      context="neutral"
      disabled={false}
      isBlock={false}
      isInline={false}
      isLoading={false}
      key=".0"
      size="normal"
      type="button"
    >
      <button
        className="Button Button--context_neutral ButtonGroup__button ButtonGroup__button--context_neutral ButtonGroup__button--first"
        disabled={false}
        type="button"
      >
        A button
      </button>
    </Button>
    <Button
      className="ButtonGroup__button ButtonGroup__button--context_neutral ButtonGroup__button--last"
      context="neutral"
      disabled={false}
      isBlock={false}
      isInline={false}
      isLoading={false}
      key=".1"
      size="normal"
      type="button"
    >
      <button
        className="Button Button--context_neutral ButtonGroup__button ButtonGroup__button--context_neutral ButtonGroup__button--last"
        disabled={false}
        type="button"
      >
        Another button
      </button>
    </Button>
  </div>
</ButtonGroup>
`;

exports[`<ButtonGroup> that renders a button should render with conditional JSX 1`] = `
<ButtonGroup
  context="neutral"
  isBlock={false}
  size="normal"
>
  <div
    className="ButtonGroup"
    role="group"
  >
    <Button
      className="ButtonGroup__button ButtonGroup__button--context_neutral ButtonGroup__button--first"
      context="neutral"
      disabled={false}
      isBlock={false}
      isInline={false}
      isLoading={false}
      key=".0"
      size="normal"
      type="button"
    >
      <button
        className="Button Button--context_neutral ButtonGroup__button ButtonGroup__button--context_neutral ButtonGroup__button--first"
        disabled={false}
        type="button"
      >
        A button
      </button>
    </Button>
  </div>
</ButtonGroup>
`;

exports[`<ButtonGroup> that renders a button should support mixed element types 1`] = `
<ButtonGroup
  context="neutral"
  isBlock={true}
  size="large"
>
  <div
    className="ButtonGroup ButtonGroup--isBlock"
    role="group"
  >
    <Button
      className="ButtonGroup__button ButtonGroup__button--isBlock ButtonGroup__button--context_neutral ButtonGroup__button--first"
      context="neutral"
      disabled={false}
      isBlock={false}
      isInline={false}
      isLoading={false}
      key=".0"
      size="large"
      type="button"
    >
      <button
        className="Button Button--context_neutral Button--size_large ButtonGroup__button ButtonGroup__button--isBlock ButtonGroup__button--context_neutral ButtonGroup__button--first"
        disabled={false}
        type="button"
      >
        A button
      </button>
    </Button>
    <Button
      className="ButtonGroup__button ButtonGroup__button--isBlock ButtonGroup__button--context_neutral"
      context="neutral"
      disabled={false}
      href="#"
      isBlock={false}
      isInline={false}
      isLoading={false}
      key=".1"
      size="large"
      type="button"
    >
      <a
        className="Button Button--context_neutral Button--size_large ButtonGroup__button ButtonGroup__button--isBlock ButtonGroup__button--context_neutral"
        href="#"
      >
        An anchor
      </a>
    </Button>
    <Dropdown
      additionalSelectProps={Object {}}
      button={
        <ForwardRef
          context="neutral"
          disabled={false}
          isBlock={false}
          isInline={false}
          isLoading={false}
          size="normal"
          type="button"
        >
          A dropdown button
        </ForwardRef>
      }
      className="ButtonGroup__button ButtonGroup__button--isBlock ButtonGroup__button--context_neutral ButtonGroup__button--last"
      context="neutral"
      key=".2"
      listClassName=""
      onChange={[Function]}
      placement="bottom-end"
      size="large"
    >
      <Button
        aria-expanded={false}
        aria-haspopup="listbox"
        aria-labelledby="downshift-0-label downshift-0-toggle-button"
        className="ButtonGroup__button ButtonGroup__button--isBlock ButtonGroup__button--context_neutral ButtonGroup__button--last"
        context="neutral"
        disabled={false}
        id="downshift-0-toggle-button"
        isBlock={false}
        isInline={false}
        isLoading={false}
        onClick={[Function]}
        onKeyDown={[Function]}
        size="large"
        type="button"
      >
        <button
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="downshift-0-label downshift-0-toggle-button"
          className="Button Button--context_neutral Button--size_large ButtonGroup__button ButtonGroup__button--isBlock ButtonGroup__button--context_neutral ButtonGroup__button--last"
          disabled={false}
          id="downshift-0-toggle-button"
          onClick={[Function]}
          onKeyDown={[Function]}
          type="button"
        >
          A dropdown button
        </button>
      </Button>
      <List
        aria-labelledby="downshift-0-label"
        doSelectOnNavigate={false}
        id="downshift-0-menu"
        isControlledNavigation={true}
        isDivided={false}
        onBlur={[Function]}
        onKeyDown={[Function]}
        onMouseLeave={[Function]}
        role="listbox"
        tabIndex={-1}
      >
        <ul
          aria-labelledby="downshift-0-label"
          className="List"
          id="downshift-0-menu"
          onBlur={[Function]}
          onKeyDown={[Function]}
          onMouseLeave={[Function]}
          role="listbox"
          tabIndex={-1}
        />
      </List>
    </Dropdown>
  </div>
</ButtonGroup>
`;
