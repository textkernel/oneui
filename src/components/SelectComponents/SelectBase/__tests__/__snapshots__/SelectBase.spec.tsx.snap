// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SelectBase rendering should initially render empty component correctly 1`] = `
<SelectBase
  blurredRenderer={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "getInputProps": [Function],
            "getToggleButtonProps": [Function],
            "onBlur": [Function],
            "onFocus": [Function],
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": <input
            aria-activedescendant={null}
            aria-autocomplete="list"
            aria-controls={null}
            aria-labelledby="downshift-0-label"
            autoComplete="off"
            id="downshift-0-input"
            onBlur={[Function]}
            onChange={[Function]}
            onKeyDown={[Function]}
            value=""
          />,
        },
      ],
    }
  }
  focusedRenderer={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "getInputProps": [Function],
            "getToggleButtonProps": [Function],
            "onBlur": [Function],
            "onFocus": [Function],
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": <input
            aria-activedescendant={null}
            aria-autocomplete="list"
            aria-controls={null}
            aria-labelledby="downshift-0-label"
            autoComplete="off"
            id="downshift-0-input"
            onBlur={[Function]}
            onChange={[Function]}
            onKeyDown={[Function]}
            value=""
          />,
        },
      ],
    }
  }
  highlightOnEmptyInput={true}
  listRenderer={[Function]}
  onBlur={[MockFunction]}
  onClearAllSelected={[MockFunction]}
  onInputValueChange={[MockFunction]}
  onSelectionAdd={[MockFunction]}
  suggestionToString={[Function]}
  suggestions={
    Array [
      Object {
        "name": "Sun",
      },
      Object {
        "name": "Moon",
      },
      Object {
        "name": "Mercury",
      },
      Object {
        "name": "Venus",
      },
      Object {
        "name": "Earth",
      },
      Object {
        "name": "Mars",
      },
      Object {
        "name": "Jupiter",
      },
      Object {
        "name": "Saturn",
      },
      Object {
        "name": "Neptune",
      },
      Object {
        "disabled": true,
        "name": "Pluto",
      },
    ]
  }
>
  <div
    className="SelectBase"
  >
    <Downshift
      defaultHighlightedIndex={0}
      defaultIsOpen={false}
      environment={[Window]}
      getA11yStatusMessage={[Function]}
      inputValue=""
      itemToString={[Function]}
      onChange={[Function]}
      onInputValueChange={[Function]}
      onOuterClick={[Function]}
      onSelect={[Function]}
      onStateChange={[Function]}
      onUserAction={[Function]}
      scrollIntoView={[Function]}
      selectedItemChanged={[Function]}
      stateReducer={[Function]}
      suppressRefError={false}
    >
      <div
        aria-expanded={false}
        aria-haspopup="listbox"
        aria-labelledby="downshift-0-label"
        aria-owns={null}
        className="SelectBase__main"
        role="combobox"
      >
        <FieldWrapper
          className="SelectBase__field"
          clearLabel=""
          isArrowUp={false}
          isFocused={false}
          onArrowClick={[Function]}
          onClear={[Function]}
          onClick={[Function]}
          showArrow={false}
          showClearButton={false}
        >
          <div
            className="FieldWrapper SelectBase__field"
            onClick={[Function]}
          >
            <div
              className="FieldWrapper__content"
            >
              <input
                aria-activedescendant={null}
                aria-autocomplete="list"
                aria-controls={null}
                aria-labelledby="downshift-0-label"
                autoComplete="off"
                id="downshift-0-input"
                onBlur={[Function]}
                onChange={[Function]}
                onKeyDown={[Function]}
                value=""
              />
              <List
                aria-labelledby="downshift-0-label"
                id="downshift-0-menu"
                isControlledNavigation={true}
                role="listbox"
              >
                <ul
                  aria-labelledby="downshift-0-label"
                  className="List"
                  id="downshift-0-menu"
                  role="listbox"
                />
              </List>
            </div>
          </div>
        </FieldWrapper>
      </div>
    </Downshift>
  </div>
</SelectBase>
`;
