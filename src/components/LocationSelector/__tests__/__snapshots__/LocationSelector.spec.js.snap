// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LocationSelector component should render LocationSelector properly when modal is open 1`] = `
<LocationSelector
  additionalGoogleProps={Object {}}
  apiKey="apiKey"
  clearLabel="Clear"
  country="NL"
  doneLabel="doneLabel"
  hasRadius={true}
  inputPlaceholder="inputPlaceholder"
  language="en"
  maxRadius={100}
  minRadius={1}
  modalContentLabel="Location selection dialog"
  noSuggestionsPlaceholder="noSuggestionsPlaceholder"
  onAddLocation={[MockFunction]}
  onBlur={[Function]}
  onLocationAutocompleteError={[MockFunction]}
  onRemoveAllLocations={[MockFunction]}
  onRemoveLocation={[MockFunction]}
  onUpdateLocation={[MockFunction]}
  openOnEnterPress={true}
  placeTypes={
    Array [
      "(regions)",
    ]
  }
  radiusDefaultValue={2}
  radiusStep={1}
  radiusUnits="km"
  renderRadiusLabel={[Function]}
  selectedLocations={
    Array [
      Object {
        "center": Object {
          "lat": 52.3666969,
          "lng": 4.894539799999961,
        },
        "description": "Amsterdam",
        "id": "ajdo-219a-j19v-0491",
        "radius": 42,
        "sliderLabel": "42km",
      },
      Object {
        "center": Object {
          "lat": 52.09073739999999,
          "lng": 5.121420100000023,
        },
        "description": "Utrecht",
        "id": "ajdo-219a-j19v-0492",
        "radius": 20,
        "sliderLabel": "20km",
      },
    ]
  }
  shouldGetAddressInfo={false}
  showCountryInSuggestions={true}
  withoutLocationCards={false}
>
  <div>
    <FieldWrapper
      className="LocationSelector__mainTextButtonWrapper"
      clearLabel="Clear"
      disabled={false}
      isFocused={true}
      onClear={[MockFunction]}
      onClick={[Function]}
      showClearButton={true}
    >
      <div
        className="FieldWrapper FieldWrapper--isFocused LocationSelector__mainTextButtonWrapper"
        disabled={false}
        onClick={[Function]}
      >
        <div
          className="FieldWrapper__content"
        >
          <FaMapMarkerAlt
            className="LocationSelector__icon"
          >
            <IconBase
              attr={
                Object {
                  "viewBox": "0 0 384 512",
                }
              }
              className="LocationSelector__icon"
            >
              <svg
                className="LocationSelector__icon"
                fill="currentColor"
                height="1em"
                stroke="currentColor"
                strokeWidth="0"
                style={
                  Object {
                    "color": undefined,
                  }
                }
                viewBox="0 0 384 512"
                width="1em"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M172.268 501.67C26.97 291.031 0 269.413 0 192 0 85.961 85.961 0 192 0s192 85.961 192 192c0 77.413-26.97 99.031-172.268 309.67-9.535 13.774-29.93 13.773-39.464 0zM192 272c44.183 0 80-35.817 80-80s-35.817-80-80-80-80 35.817-80 80 35.817 80 80 80z"
                  key="0"
                />
              </svg>
            </IconBase>
          </FaMapMarkerAlt>
          <button
            className="LocationSelector__mainTextButton LocationSelector__mainTextButton--muted"
            onBlur={[Function]}
            onFocus={[Function]}
            onKeyUp={[Function]}
            type="button"
          >
            inputPlaceholder
          </button>
        </div>
        <Button
          className="FieldWrapper__clearButton"
          context="link"
          disabled={false}
          isBlock={false}
          isInline={true}
          onClick={[Function]}
          size="normal"
          type="button"
        >
          <button
            className="Button Button--isInline Button--context_link FieldWrapper__clearButton"
            disabled={false}
            onClick={[Function]}
            type="button"
          >
            Clear
          </button>
        </Button>
      </div>
    </FieldWrapper>
    <Modal
      ariaHideApp={false}
      className="LocationSelector__modal"
      contentLabel="Location selection dialog"
      isOpen={true}
      isPositionFixed={true}
      onRequestClose={[Function]}
    >
      <Modal
        ariaHideApp={false}
        bodyOpenClassName="Modal__body"
        className={
          Object {
            "afterOpen": "Modal__content--entered",
            "base": "Modal__content Modal__content--isPositionFixed LocationSelector__modal",
            "beforeClose": "Modal__content--exited",
          }
        }
        closeTimeoutMS={300}
        contentLabel="Location selection dialog"
        isOpen={true}
        isPositionFixed={true}
        onAfterOpen={[Function]}
        onRequestClose={[Function]}
        overlayClassName={
          Object {
            "afterOpen": "Modal__overlay--entered",
            "base": "Modal__overlay",
            "beforeClose": "Modal__overlay--exited",
          }
        }
        overlayRef={[Function]}
        parentSelector={[Function]}
        portalClassName="ReactModalPortal"
        role="dialog"
        shouldCloseOnEsc={true}
        shouldCloseOnOverlayClick={true}
        shouldFocusAfterRender={true}
        shouldReturnFocusAfterClose={true}
      >
        <Portal
          containerInfo={
            <div
              class="ReactModalPortal"
            >
              <div
                class="Modal__overlay Modal__overlay--entered"
              >
                <div
                  aria-label="Location selection dialog"
                  class="Modal__content Modal__content--isPositionFixed LocationSelector__modal Modal__content--entered"
                  role="dialog"
                  tabindex="-1"
                >
                  <div
                    aria-busy="true"
                    aria-hidden="false"
                    class="LoadingSpinner LoadingSpinner--centerIn_parent"
                    role="status"
                  >
                    <svg
                      class="LoadingSpinner__svg"
                      viewBox="0,0,44,44"
                    >
                      <circle
                        class="LoadingSpinner__path LoadingSpinner__path--context_brand"
                        cx="22"
                        cy="22"
                        fill="none"
                        r="20"
                        stroke-width="4"
                      />
                    </svg>
                  </div>
                </div>
              </div>
            </div>
          }
        >
          <ModalPortal
            ariaHideApp={false}
            bodyOpenClassName="Modal__body"
            className={
              Object {
                "afterOpen": "Modal__content--entered",
                "base": "Modal__content Modal__content--isPositionFixed LocationSelector__modal",
                "beforeClose": "Modal__content--exited",
              }
            }
            closeTimeoutMS={300}
            contentLabel="Location selection dialog"
            defaultStyles={
              Object {
                "content": Object {
                  "WebkitOverflowScrolling": "touch",
                  "background": "#fff",
                  "border": "1px solid #ccc",
                  "borderRadius": "4px",
                  "bottom": "40px",
                  "left": "40px",
                  "outline": "none",
                  "overflow": "auto",
                  "padding": "20px",
                  "position": "absolute",
                  "right": "40px",
                  "top": "40px",
                },
                "overlay": Object {
                  "backgroundColor": "rgba(255, 255, 255, 0.75)",
                  "bottom": 0,
                  "left": 0,
                  "position": "fixed",
                  "right": 0,
                  "top": 0,
                },
              }
            }
            isOpen={true}
            isPositionFixed={true}
            onAfterOpen={[Function]}
            onRequestClose={[Function]}
            overlayClassName={
              Object {
                "afterOpen": "Modal__overlay--entered",
                "base": "Modal__overlay",
                "beforeClose": "Modal__overlay--exited",
              }
            }
            overlayRef={[Function]}
            parentSelector={[Function]}
            portalClassName="ReactModalPortal"
            role="dialog"
            shouldCloseOnEsc={true}
            shouldCloseOnOverlayClick={true}
            shouldFocusAfterRender={true}
            shouldReturnFocusAfterClose={true}
            style={
              Object {
                "content": Object {},
                "overlay": Object {},
              }
            }
          >
            <div
              className="Modal__overlay Modal__overlay--entered"
              onClick={[Function]}
              onMouseDown={[Function]}
              style={Object {}}
            >
              <div
                aria-label="Location selection dialog"
                className="Modal__content Modal__content--isPositionFixed LocationSelector__modal Modal__content--entered"
                onClick={[Function]}
                onKeyDown={[Function]}
                onMouseDown={[Function]}
                onMouseUp={[Function]}
                role="dialog"
                style={Object {}}
                tabIndex="-1"
              >
                <LocationSelectorDialogWithGoogleLoader
                  additionalGoogleProps={Object {}}
                  apiKey="apiKey"
                  clearLabel="Clear"
                  country="NL"
                  doneLabel="doneLabel"
                  getMarkers={[Function]}
                  hasRadius={true}
                  inputPlaceholder="inputPlaceholder"
                  language="en"
                  maxRadius={100}
                  minRadius={1}
                  noSuggestionsPlaceholder="noSuggestionsPlaceholder"
                  onAddLocation={[Function]}
                  onCloseModal={[Function]}
                  onLocationAutocompleteError={[MockFunction]}
                  onRemoveAllLocations={[MockFunction]}
                  onRemoveLocation={[MockFunction]}
                  onUpdateLocation={[MockFunction]}
                  placeTypes={
                    Array [
                      "(regions)",
                    ]
                  }
                  radiusStep={1}
                  renderRadiusLabel={[Function]}
                  selectedLocations={
                    Array [
                      Object {
                        "center": Object {
                          "lat": 52.3666969,
                          "lng": 4.894539799999961,
                        },
                        "description": "Amsterdam",
                        "id": "ajdo-219a-j19v-0491",
                        "radius": 42,
                        "sliderLabel": "42km",
                      },
                      Object {
                        "center": Object {
                          "lat": 52.09073739999999,
                          "lng": 5.121420100000023,
                        },
                        "description": "Utrecht",
                        "id": "ajdo-219a-j19v-0492",
                        "radius": 20,
                        "sliderLabel": "20km",
                      },
                    ]
                  }
                  showCountryInSuggestions={true}
                  withoutLocationCards={false}
                >
                  <Memo(LoadScriptNext)
                    googleMapsApiKey="apiKey"
                    language="en"
                    libraries={
                      Array [
                        "places",
                      ]
                    }
                    loadingElement={
                      <LoadingSpinner
                        centerIn="parent"
                        context="brand"
                        hidden={false}
                      />
                    }
                  >
                    <LoadingSpinner
                      centerIn="parent"
                      context="brand"
                      hidden={false}
                    >
                      <div
                        aria-busy={true}
                        aria-hidden={false}
                        className="LoadingSpinner LoadingSpinner--centerIn_parent"
                        role="status"
                      >
                        <svg
                          className="LoadingSpinner__svg"
                          style={null}
                          viewBox={
                            Array [
                              0,
                              0,
                              44,
                              44,
                            ]
                          }
                        >
                          <circle
                            className="LoadingSpinner__path LoadingSpinner__path--context_brand"
                            cx="22"
                            cy="22"
                            fill="none"
                            r="20"
                            strokeWidth="4"
                          />
                        </svg>
                      </div>
                    </LoadingSpinner>
                  </Memo(LoadScriptNext)>
                </LocationSelectorDialogWithGoogleLoader>
              </div>
            </div>
          </ModalPortal>
        </Portal>
      </Modal>
    </Modal>
  </div>
</LocationSelector>
`;

exports[`LocationSelector component should render LocationSelector propertly when modal is closed 1`] = `
<LocationSelector
  additionalGoogleProps={Object {}}
  apiKey="apiKey"
  clearLabel="Clear"
  country="NL"
  doneLabel="doneLabel"
  hasRadius={true}
  inputPlaceholder="inputPlaceholder"
  language="en"
  maxRadius={100}
  minRadius={1}
  modalContentLabel="Location selection dialog"
  noSuggestionsPlaceholder="noSuggestionsPlaceholder"
  onAddLocation={[MockFunction]}
  onBlur={[Function]}
  onLocationAutocompleteError={[MockFunction]}
  onRemoveAllLocations={[MockFunction]}
  onRemoveLocation={[MockFunction]}
  onUpdateLocation={[MockFunction]}
  openOnEnterPress={true}
  placeTypes={
    Array [
      "(regions)",
    ]
  }
  radiusDefaultValue={2}
  radiusStep={1}
  radiusUnits="km"
  renderRadiusLabel={[Function]}
  selectedLocations={
    Array [
      Object {
        "center": Object {
          "lat": 52.3666969,
          "lng": 4.894539799999961,
        },
        "description": "Amsterdam",
        "id": "ajdo-219a-j19v-0491",
        "radius": 42,
        "sliderLabel": "42km",
      },
      Object {
        "center": Object {
          "lat": 52.09073739999999,
          "lng": 5.121420100000023,
        },
        "description": "Utrecht",
        "id": "ajdo-219a-j19v-0492",
        "radius": 20,
        "sliderLabel": "20km",
      },
    ]
  }
  shouldGetAddressInfo={false}
  showCountryInSuggestions={true}
  withoutLocationCards={false}
>
  <div>
    <FieldWrapper
      className="LocationSelector__mainTextButtonWrapper"
      clearLabel="Clear"
      disabled={false}
      isFocused={false}
      onClear={[MockFunction]}
      onClick={[Function]}
      showClearButton={true}
    >
      <div
        className="FieldWrapper LocationSelector__mainTextButtonWrapper"
        disabled={false}
        onClick={[Function]}
      >
        <div
          className="FieldWrapper__content"
        >
          <FaMapMarkerAlt
            className="LocationSelector__icon"
          >
            <IconBase
              attr={
                Object {
                  "viewBox": "0 0 384 512",
                }
              }
              className="LocationSelector__icon"
            >
              <svg
                className="LocationSelector__icon"
                fill="currentColor"
                height="1em"
                stroke="currentColor"
                strokeWidth="0"
                style={
                  Object {
                    "color": undefined,
                  }
                }
                viewBox="0 0 384 512"
                width="1em"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M172.268 501.67C26.97 291.031 0 269.413 0 192 0 85.961 85.961 0 192 0s192 85.961 192 192c0 77.413-26.97 99.031-172.268 309.67-9.535 13.774-29.93 13.773-39.464 0zM192 272c44.183 0 80-35.817 80-80s-35.817-80-80-80-80 35.817-80 80 35.817 80 80 80z"
                  key="0"
                />
              </svg>
            </IconBase>
          </FaMapMarkerAlt>
          <button
            className="LocationSelector__mainTextButton LocationSelector__mainTextButton--muted"
            onBlur={[Function]}
            onFocus={[Function]}
            onKeyUp={[Function]}
            type="button"
          >
            inputPlaceholder
          </button>
        </div>
        <Button
          className="FieldWrapper__clearButton"
          context="link"
          disabled={false}
          isBlock={false}
          isInline={true}
          onClick={[Function]}
          size="normal"
          type="button"
        >
          <button
            className="Button Button--isInline Button--context_link FieldWrapper__clearButton"
            disabled={false}
            onClick={[Function]}
            type="button"
          >
            Clear
          </button>
        </Button>
      </div>
    </FieldWrapper>
    <Modal
      ariaHideApp={false}
      className="LocationSelector__modal"
      contentLabel="Location selection dialog"
      isOpen={false}
      isPositionFixed={true}
      onRequestClose={[Function]}
    >
      <Modal
        ariaHideApp={false}
        bodyOpenClassName="Modal__body"
        className={
          Object {
            "afterOpen": "Modal__content--entered",
            "base": "Modal__content Modal__content--isPositionFixed LocationSelector__modal",
            "beforeClose": "Modal__content--exited",
          }
        }
        closeTimeoutMS={300}
        contentLabel="Location selection dialog"
        isOpen={false}
        isPositionFixed={true}
        onAfterOpen={[Function]}
        onRequestClose={[Function]}
        overlayClassName={
          Object {
            "afterOpen": "Modal__overlay--entered",
            "base": "Modal__overlay",
            "beforeClose": "Modal__overlay--exited",
          }
        }
        overlayRef={[Function]}
        parentSelector={[Function]}
        portalClassName="ReactModalPortal"
        role="dialog"
        shouldCloseOnEsc={true}
        shouldCloseOnOverlayClick={true}
        shouldFocusAfterRender={true}
        shouldReturnFocusAfterClose={true}
      >
        <Portal
          containerInfo={
            <div
              class="ReactModalPortal"
            />
          }
        >
          <ModalPortal
            ariaHideApp={false}
            bodyOpenClassName="Modal__body"
            className={
              Object {
                "afterOpen": "Modal__content--entered",
                "base": "Modal__content Modal__content--isPositionFixed LocationSelector__modal",
                "beforeClose": "Modal__content--exited",
              }
            }
            closeTimeoutMS={300}
            contentLabel="Location selection dialog"
            defaultStyles={
              Object {
                "content": Object {
                  "WebkitOverflowScrolling": "touch",
                  "background": "#fff",
                  "border": "1px solid #ccc",
                  "borderRadius": "4px",
                  "bottom": "40px",
                  "left": "40px",
                  "outline": "none",
                  "overflow": "auto",
                  "padding": "20px",
                  "position": "absolute",
                  "right": "40px",
                  "top": "40px",
                },
                "overlay": Object {
                  "backgroundColor": "rgba(255, 255, 255, 0.75)",
                  "bottom": 0,
                  "left": 0,
                  "position": "fixed",
                  "right": 0,
                  "top": 0,
                },
              }
            }
            isOpen={false}
            isPositionFixed={true}
            onAfterOpen={[Function]}
            onRequestClose={[Function]}
            overlayClassName={
              Object {
                "afterOpen": "Modal__overlay--entered",
                "base": "Modal__overlay",
                "beforeClose": "Modal__overlay--exited",
              }
            }
            overlayRef={[Function]}
            parentSelector={[Function]}
            portalClassName="ReactModalPortal"
            role="dialog"
            shouldCloseOnEsc={true}
            shouldCloseOnOverlayClick={true}
            shouldFocusAfterRender={true}
            shouldReturnFocusAfterClose={true}
            style={
              Object {
                "content": Object {},
                "overlay": Object {},
              }
            }
          />
        </Portal>
      </Modal>
    </Modal>
  </div>
</LocationSelector>
`;
