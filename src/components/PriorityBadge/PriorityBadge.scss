@use 'sass:map';

@mixin common-button-style(
    $hoverColor: var(--color-neutral-10),
    $activeColor: var(--color-neutral-20)
) {
    & {
        align-items: center;
        background-color: var(--transparent);
        cursor: pointer;
        display: flex;
        flex-shrink: 0;
        height: var(--space-400);
        justify-content: center;
        width: var(--space-400);
    }

    &:hover:not([disabled]),
    &:focus:not([disabled]) {
        background-color: $hoverColor;
    }
    &:active:not([disabled]) {
        background-color: $activeColor;
    }

    &[disabled] {
        cursor: not-allowed;
    }
}

@mixin selected-state(
    $selectedColor: var(--color-info-5),
    $hoverColor: var(--color-info-10),
    $activeColor: var(--color-info-20)
) {
    & {
        background-color: $selectedColor;
    }
    &:hover:not([disabled]),
    &:focus:not([disabled]) {
        background-color: $hoverColor;
    }
    &:active:not([disabled]) {
        background-color: $activeColor;
    }
    &[disabled] {
        background-color: $selectedColor;
    }
}

$icon-status-colors: (
    mandatory: (
        normal: var(--color-success-60),
        disabled: var(--color-success-30),
    ),
    important: (
        normal: var(--color-cautious-60),
        disabled: var(--color-cautious-30),
    ),
    optional: (
        normal: var(--color-neutral-60),
        disabled: var(--color-neutral-30),
    ),
    exclude: (
        normal: var(--color-critical-60),
        disabled: var(--color-critical-30),
    ),
);

.PriorityBadge {
    align-items: center;
    border-radius: var(--space-100);
    border: 1px solid var(--color-neutral-30);
    cursor: pointer;
    display: flex;
    height: var(--space-400);
    overflow: hidden;

    &__priorityButton {
        border: 0;
        border-right: 1px solid #b3b3b3;
        padding: 0;

        @include common-button-style();
    }

    &__icon {
        font-size: 20px;

        @each $status, $colors in $icon-status-colors {
            &--#{$status} {
                color: map.get($colors, normal);

                &[disabled] {
                    color: map.get($colors, disabled);
                }
            }
        }
    }

    &__optionButton {
        border: 0;
        box-sizing: border-box;
        flex-grow: 1;
        gap: var(--space-50);
        padding: 0 var(--space-100);
        width: 100%;

        &--valueText {
            max-width: 136px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        &--optionText {
            color: var(--color-info-60);
            flex-shrink: 0;
            width: fit-content;
        }

        &[disabled] {
            .PriorityBadge__optionButton--optionText {
                color: var(--color-info-30);
            }
        }

        @include common-button-style();
    }

    &__priorityButton--isSelected,
    &__optionButton--isSelected {
        @include selected-state();
    }

    .Dropdown {
        &__list {
            border-radius: var(--space-100);
            overflow: hidden;
            width: 100%;

            .ListItem {
                align-items: center;
                display: flex;
                gap: var(--space-100);
                justify-content: flex-start;
            }
        }
    }

    &__listHeadline {
        background-color: var(--color-brand-5);
        padding: 12px 12px 4px;
        font-weight: var(--font-weight-bold);
        color: var(--color-brand-60);
    }

    &__closeButton {
        border: 0;
        border-left: 1px solid #b3b3b3;
        padding: 0;

        &[disabled] {
            .svg {
                color: var(--color-neutral-30);
            }
        }

        @include common-button-style();
    }
}
