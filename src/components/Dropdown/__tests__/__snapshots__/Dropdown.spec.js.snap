// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Dropdown should allow for conditional rendering of items 1`] = `
<Dropdown
  button={
    <ForwardRef
      context="brand"
    >
      Click me!
    </ForwardRef>
  }
  onChange={[MockFunction]}
  placement="top-start"
>
  <Button
    aria-expanded={true}
    aria-haspopup="listbox"
    aria-labelledby="downshift-95-label downshift-95-toggle-button"
    context="brand"
    id="downshift-95-toggle-button"
    onClick={[Function]}
    onKeyDown={[Function]}
  >
    <button
      aria-expanded={true}
      aria-haspopup="listbox"
      aria-labelledby="downshift-95-label downshift-95-toggle-button"
      className="Button Button--context_brand"
      disabled={false}
      id="downshift-95-toggle-button"
      onClick={[Function]}
      onKeyDown={[Function]}
      type="button"
    >
      Click me!
    </button>
  </Button>
  <List
    aria-labelledby="downshift-95-label"
    className="Dropdown__list"
    id="downshift-95-menu"
    isControlledNavigation={true}
    onBlur={[Function]}
    onKeyDown={[Function]}
    onMouseLeave={[Function]}
    role="listbox"
    style={
      Object {
        "left": "0",
        "position": "absolute",
        "top": "0",
      }
    }
    tabIndex={-1}
  >
    <ul
      aria-labelledby="downshift-95-label"
      className="List Dropdown__list"
      id="downshift-95-menu"
      onBlur={[Function]}
      onKeyDown={[Function]}
      onMouseLeave={[Function]}
      role="listbox"
      style={
        Object {
          "left": "0",
          "position": "absolute",
          "top": "0",
        }
      }
      tabIndex={-1}
    >
      <ListItem
        aria-selected="false"
        className="List__item"
        id="downshift-95-item-0"
        isHighlighted={false}
        key=".$.$key-2"
        onClick={[Function]}
        onMouseMove={[Function]}
        role="option"
        value="testValue"
      >
        <li
          aria-selected="false"
          className="ListItem ListItem--clickable List__item"
          id="downshift-95-item-0"
          onClick={[Function]}
          onMouseMove={[Function]}
          role="presentation"
        >
          <Text
            inline={true}
            key=".0"
          >
            <span>
              With value
            </span>
          </Text>
        </li>
      </ListItem>
    </ul>
  </List>
</Dropdown>
`;

exports[`Dropdown should downshift only by enabled items with value 1`] = `
<Dropdown
  button={
    <ForwardRef
      context="brand"
    >
      Click me!
    </ForwardRef>
  }
  onChange={[MockFunction]}
  placement="top-start"
>
  <Button
    aria-expanded={true}
    aria-haspopup="listbox"
    aria-labelledby="downshift-12-label downshift-12-toggle-button"
    context="brand"
    id="downshift-12-toggle-button"
    onClick={[Function]}
    onKeyDown={[Function]}
  >
    <button
      aria-expanded={true}
      aria-haspopup="listbox"
      aria-labelledby="downshift-12-label downshift-12-toggle-button"
      className="Button Button--context_brand"
      disabled={false}
      id="downshift-12-toggle-button"
      onClick={[Function]}
      onKeyDown={[Function]}
      type="button"
    >
      Click me!
    </button>
  </Button>
  <List
    aria-labelledby="downshift-12-label"
    className="Dropdown__list"
    id="downshift-12-menu"
    isControlledNavigation={true}
    onBlur={[Function]}
    onKeyDown={[Function]}
    onMouseLeave={[Function]}
    role="listbox"
    style={
      Object {
        "left": "0",
        "position": "absolute",
        "top": "0",
      }
    }
    tabIndex={-1}
  >
    <ul
      aria-labelledby="downshift-12-label"
      className="List Dropdown__list"
      id="downshift-12-menu"
      onBlur={[Function]}
      onKeyDown={[Function]}
      onMouseLeave={[Function]}
      role="listbox"
      style={
        Object {
          "left": "0",
          "position": "absolute",
          "top": "0",
        }
      }
      tabIndex={-1}
    >
      <ListItem
        className="List__item"
        disabled={true}
        key=".$.$key-1"
      >
        <li
          className="ListItem ListItem--disabled List__item"
          role="presentation"
        >
          <Text
            inline={true}
            key=".0"
          >
            <span>
              Disabled
            </span>
          </Text>
        </li>
      </ListItem>
      <ListItem
        aria-selected="false"
        className="List__item"
        id="downshift-12-item-0"
        isHighlighted={false}
        key=".$.$key-2"
        onClick={[Function]}
        onMouseMove={[Function]}
        role="option"
        value="1"
      >
        <li
          aria-selected="false"
          className="ListItem ListItem--clickable List__item"
          id="downshift-12-item-0"
          onClick={[Function]}
          onMouseMove={[Function]}
          role="presentation"
        >
          <Text
            inline={true}
            key=".0"
          >
            <span>
              With value 1
            </span>
          </Text>
        </li>
      </ListItem>
      <ListItem
        className="List__item"
        key=".$.$key-3"
      >
        <li
          className="ListItem List__item"
          role="presentation"
        >
          <Text
            inline={true}
            key=".0"
          >
            <span>
              Without value
            </span>
          </Text>
        </li>
      </ListItem>
      <div
        className="List__item customDiv"
        key=".$.$key-4"
      >
        Div
      </div>
      <ListItem
        aria-selected="false"
        className="List__item"
        id="downshift-12-item-1"
        isHighlighted={false}
        key=".$.$key-5"
        onClick={[Function]}
        onMouseMove={[Function]}
        role="option"
        value="2"
      >
        <li
          aria-selected="false"
          className="ListItem ListItem--clickable List__item"
          id="downshift-12-item-1"
          onClick={[Function]}
          onMouseMove={[Function]}
          role="presentation"
        >
          <Text
            inline={true}
            key=".0"
          >
            <span>
              With value 2
            </span>
          </Text>
        </li>
      </ListItem>
    </ul>
  </List>
</Dropdown>
`;

exports[`Dropdown should render correctly closed 1`] = `
<Dropdown
  additionalSelectProps={
    Object {
      "onStateChange": [MockFunction],
    }
  }
  button={
    <ForwardRef
      context="brand"
    >
      Click me!
    </ForwardRef>
  }
  onChange={[MockFunction]}
  onMenuBlur={[MockFunction]}
  onMenuFocus={[MockFunction]}
  onToggleClick={[MockFunction]}
  placement="top-start"
>
  <Button
    aria-expanded={false}
    aria-haspopup="listbox"
    aria-labelledby="downshift-0-label downshift-0-toggle-button"
    context="brand"
    id="downshift-0-toggle-button"
    onClick={[Function]}
    onKeyDown={[Function]}
  >
    <button
      aria-expanded={false}
      aria-haspopup="listbox"
      aria-labelledby="downshift-0-label downshift-0-toggle-button"
      className="Button Button--context_brand"
      disabled={false}
      id="downshift-0-toggle-button"
      onClick={[Function]}
      onKeyDown={[Function]}
      type="button"
    >
      Click me!
    </button>
  </Button>
  <List
    aria-labelledby="downshift-0-label"
    id="downshift-0-menu"
    isControlledNavigation={true}
    onBlur={[Function]}
    onFocus={[MockFunction]}
    onKeyDown={[Function]}
    onMouseLeave={[Function]}
    role="listbox"
    tabIndex={-1}
  >
    <ul
      aria-labelledby="downshift-0-label"
      className="List"
      id="downshift-0-menu"
      onBlur={[Function]}
      onFocus={[MockFunction]}
      onKeyDown={[Function]}
      onMouseLeave={[Function]}
      role="listbox"
      tabIndex={-1}
    />
  </List>
</Dropdown>
`;

exports[`Dropdown should render correctly opened 1`] = `
<Dropdown
  additionalSelectProps={
    Object {
      "onStateChange": [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "isOpen": true,
              "type": "__togglebutton_click__",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
  button={
    <ForwardRef
      context="brand"
    >
      Click me!
    </ForwardRef>
  }
  onChange={[MockFunction]}
  onMenuBlur={[MockFunction]}
  onMenuFocus={[MockFunction]}
  onToggleClick={
    [MockFunction] {
      "calls": Array [
        Array [
          false,
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  placement="top-start"
>
  <Button
    aria-expanded={true}
    aria-haspopup="listbox"
    aria-labelledby="downshift-3-label downshift-3-toggle-button"
    context="brand"
    id="downshift-3-toggle-button"
    onClick={[Function]}
    onKeyDown={[Function]}
  >
    <button
      aria-expanded={true}
      aria-haspopup="listbox"
      aria-labelledby="downshift-3-label downshift-3-toggle-button"
      className="Button Button--context_brand"
      disabled={false}
      id="downshift-3-toggle-button"
      onClick={[Function]}
      onKeyDown={[Function]}
      type="button"
    >
      Click me!
    </button>
  </Button>
  <List
    aria-labelledby="downshift-3-label"
    className="Dropdown__list"
    id="downshift-3-menu"
    isControlledNavigation={true}
    onBlur={[Function]}
    onFocus={[MockFunction]}
    onKeyDown={[Function]}
    onMouseLeave={[Function]}
    role="listbox"
    style={
      Object {
        "left": "0",
        "position": "absolute",
        "top": "0",
      }
    }
    tabIndex={-1}
  >
    <ul
      aria-labelledby="downshift-3-label"
      className="List Dropdown__list"
      id="downshift-3-menu"
      onBlur={[Function]}
      onFocus={[MockFunction]}
      onKeyDown={[Function]}
      onMouseLeave={[Function]}
      role="listbox"
      style={
        Object {
          "left": "0",
          "position": "absolute",
          "top": "0",
        }
      }
      tabIndex={-1}
    >
      <ListItem
        className="List__item"
        disabled={true}
        key=".$.$disabled-key"
      >
        <li
          className="ListItem ListItem--disabled List__item"
          role="presentation"
        >
          <Text
            inline={true}
            key=".0"
          >
            <span>
              Disabled
            </span>
          </Text>
        </li>
      </ListItem>
      <ListItem
        aria-selected="false"
        className="List__item"
        id="downshift-3-item-0"
        isHighlighted={false}
        key=".$.$first-key"
        onClick={[Function]}
        onMouseMove={[Function]}
        role="option"
        value="first-value"
      >
        <li
          aria-selected="false"
          className="ListItem ListItem--clickable List__item"
          id="downshift-3-item-0"
          onClick={[Function]}
          onMouseMove={[Function]}
          role="presentation"
        >
          <Text
            inline={true}
            key=".0"
          >
            <span>
              With value
            </span>
          </Text>
        </li>
      </ListItem>
    </ul>
  </List>
</Dropdown>
`;

exports[`Dropdown should render correctly with mixed children: array and single ListItem 1`] = `
<Dropdown
  button={
    <ForwardRef
      context="brand"
    >
      Click me!
    </ForwardRef>
  }
  onChange={[MockFunction]}
  placement="top-start"
>
  <Button
    aria-expanded={true}
    aria-haspopup="listbox"
    aria-labelledby="downshift-41-label downshift-41-toggle-button"
    context="brand"
    id="downshift-41-toggle-button"
    onClick={[Function]}
    onKeyDown={[Function]}
  >
    <button
      aria-expanded={true}
      aria-haspopup="listbox"
      aria-labelledby="downshift-41-label downshift-41-toggle-button"
      className="Button Button--context_brand"
      disabled={false}
      id="downshift-41-toggle-button"
      onClick={[Function]}
      onKeyDown={[Function]}
      type="button"
    >
      Click me!
    </button>
  </Button>
  <List
    aria-labelledby="downshift-41-label"
    className="Dropdown__list"
    id="downshift-41-menu"
    isControlledNavigation={true}
    onBlur={[Function]}
    onKeyDown={[Function]}
    onMouseLeave={[Function]}
    role="listbox"
    style={
      Object {
        "left": "0",
        "position": "absolute",
        "top": "0",
      }
    }
    tabIndex={-1}
  >
    <ul
      aria-labelledby="downshift-41-label"
      className="List Dropdown__list"
      id="downshift-41-menu"
      onBlur={[Function]}
      onKeyDown={[Function]}
      onMouseLeave={[Function]}
      role="listbox"
      style={
        Object {
          "left": "0",
          "position": "absolute",
          "top": "0",
        }
      }
      tabIndex={-1}
    >
      <ListItem
        className="List__item"
        disabled={true}
        key=".$.$disabled-key"
      >
        <li
          className="ListItem ListItem--disabled List__item"
          role="presentation"
        >
          <Text
            inline={true}
            key=".0"
          >
            <span>
              Disabled
            </span>
          </Text>
        </li>
      </ListItem>
      <ListItem
        aria-selected="false"
        className="List__item"
        id="downshift-41-item-0"
        isHighlighted={false}
        key=".$.1=2$one"
        onClick={[Function]}
        onMouseMove={[Function]}
        role="option"
        value="one"
      >
        <li
          aria-selected="false"
          className="ListItem ListItem--clickable List__item"
          id="downshift-41-item-0"
          onClick={[Function]}
          onMouseMove={[Function]}
          role="presentation"
        >
          <Text
            inline={true}
            key=".0"
          >
            <span>
              one
            </span>
          </Text>
        </li>
      </ListItem>
      <ListItem
        aria-selected="false"
        className="List__item"
        id="downshift-41-item-1"
        isHighlighted={false}
        key=".$.1=2$two"
        onClick={[Function]}
        onMouseMove={[Function]}
        role="option"
        value="two"
      >
        <li
          aria-selected="false"
          className="ListItem ListItem--clickable List__item"
          id="downshift-41-item-1"
          onClick={[Function]}
          onMouseMove={[Function]}
          role="presentation"
        >
          <Text
            inline={true}
            key=".0"
          >
            <span>
              two
            </span>
          </Text>
        </li>
      </ListItem>
    </ul>
  </List>
</Dropdown>
`;
